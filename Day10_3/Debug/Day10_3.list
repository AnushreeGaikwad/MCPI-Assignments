
Day10_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ea4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08001034  08001034  00002034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001070  08001070  00003054  2**0
                  CONTENTS
  4 .ARM          00000008  08001070  08001070  00002070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001078  08001078  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001078  08001078  00002078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800107c  0800107c  0000207c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08001080  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003054  2**0
                  CONTENTS
 10 .bss          0000016c  20000054  20000054  00003054  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c0  200001c0  00003054  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000205d  00000000  00000000  0000307e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000954  00000000  00000000  000050db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001c0  00000000  00000000  00005a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000012d  00000000  00000000  00005bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019684  00000000  00000000  00005d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000245d  00000000  00000000  0001f3a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c581  00000000  00000000  000217fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000add7f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000a04  00000000  00000000  000addc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000ae7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005d  00000000  00000000  000ae7e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800101c 	.word	0x0800101c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	0800101c 	.word	0x0800101c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <I2CStart>:
 *      Author: Nilesh
 */

#include "i2c.h"

void I2CStart() {
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_START;
 8000274:	4b08      	ldr	r3, [pc, #32]	@ (8000298 <I2CStart+0x28>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a07      	ldr	r2, [pc, #28]	@ (8000298 <I2CStart+0x28>)
 800027a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800027e:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR1 & I2C_SR1_SB));
 8000280:	bf00      	nop
 8000282:	4b05      	ldr	r3, [pc, #20]	@ (8000298 <I2CStart+0x28>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f003 0301 	and.w	r3, r3, #1
 800028a:	2b00      	cmp	r3, #0
 800028c:	d0f9      	beq.n	8000282 <I2CStart+0x12>
}
 800028e:	bf00      	nop
 8000290:	bf00      	nop
 8000292:	46bd      	mov	sp, r7
 8000294:	bc80      	pop	{r7}
 8000296:	4770      	bx	lr
 8000298:	40005400 	.word	0x40005400

0800029c <I2CStop>:

void I2CRepeatStart() {
	I2CStart();
}

void I2CStop() {
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_STOP;
 80002a0:	4b08      	ldr	r3, [pc, #32]	@ (80002c4 <I2CStop+0x28>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a07      	ldr	r2, [pc, #28]	@ (80002c4 <I2CStop+0x28>)
 80002a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80002aa:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR2 & I2C_SR2_BUSY));
 80002ac:	bf00      	nop
 80002ae:	4b05      	ldr	r3, [pc, #20]	@ (80002c4 <I2CStop+0x28>)
 80002b0:	699b      	ldr	r3, [r3, #24]
 80002b2:	f003 0302 	and.w	r3, r3, #2
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d0f9      	beq.n	80002ae <I2CStop+0x12>
}
 80002ba:	bf00      	nop
 80002bc:	bf00      	nop
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr
 80002c4:	40005400 	.word	0x40005400

080002c8 <I2CSendSlaveAddress>:

void I2CSendSlaveAddress(uint8_t slaveaddr) {
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	71fb      	strb	r3, [r7, #7]
    // send slaveaddr
    // wait until address is sent
    I2C1->DR = slaveaddr;
 80002d2:	4a09      	ldr	r2, [pc, #36]	@ (80002f8 <I2CSendSlaveAddress+0x30>)
 80002d4:	79fb      	ldrb	r3, [r7, #7]
 80002d6:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 80002d8:	bf00      	nop
 80002da:	4b07      	ldr	r3, [pc, #28]	@ (80002f8 <I2CSendSlaveAddress+0x30>)
 80002dc:	695b      	ldr	r3, [r3, #20]
 80002de:	f003 0302 	and.w	r3, r3, #2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d0f9      	beq.n	80002da <I2CSendSlaveAddress+0x12>
    // dummy read to clear flags
    (void)I2C1->SR1;
 80002e6:	4b04      	ldr	r3, [pc, #16]	@ (80002f8 <I2CSendSlaveAddress+0x30>)
 80002e8:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2; // clear addr condition
 80002ea:	4b03      	ldr	r3, [pc, #12]	@ (80002f8 <I2CSendSlaveAddress+0x30>)
 80002ec:	699b      	ldr	r3, [r3, #24]
}
 80002ee:	bf00      	nop
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr
 80002f8:	40005400 	.word	0x40005400

080002fc <I2CSendData>:

void I2CSendData(uint8_t val) {
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	71fb      	strb	r3, [r7, #7]
    // send data in write mode
    // wait until address is sent
    while (!(I2C1->SR1 & I2C_SR1_TXE));
 8000306:	bf00      	nop
 8000308:	4b0a      	ldr	r3, [pc, #40]	@ (8000334 <I2CSendData+0x38>)
 800030a:	695b      	ldr	r3, [r3, #20]
 800030c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000310:	2b00      	cmp	r3, #0
 8000312:	d0f9      	beq.n	8000308 <I2CSendData+0xc>
    // write dr and clear flags
    I2C1->DR = val;
 8000314:	4a07      	ldr	r2, [pc, #28]	@ (8000334 <I2CSendData+0x38>)
 8000316:	79fb      	ldrb	r3, [r7, #7]
 8000318:	6113      	str	r3, [r2, #16]
    // wait until data byte is transferred
    while (!(I2C1->SR1 & I2C_SR1_BTF));
 800031a:	bf00      	nop
 800031c:	4b05      	ldr	r3, [pc, #20]	@ (8000334 <I2CSendData+0x38>)
 800031e:	695b      	ldr	r3, [r3, #20]
 8000320:	f003 0304 	and.w	r3, r3, #4
 8000324:	2b00      	cmp	r3, #0
 8000326:	d0f9      	beq.n	800031c <I2CSendData+0x20>
}
 8000328:	bf00      	nop
 800032a:	bf00      	nop
 800032c:	370c      	adds	r7, #12
 800032e:	46bd      	mov	sp, r7
 8000330:	bc80      	pop	{r7}
 8000332:	4770      	bx	lr
 8000334:	40005400 	.word	0x40005400

08000338 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 8000338:	b480      	push	{r7}
 800033a:	b085      	sub	sp, #20
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000340:	4b0e      	ldr	r3, [pc, #56]	@ (800037c <DelayMs+0x44>)
 8000342:	685b      	ldr	r3, [r3, #4]
 8000344:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000346:	4b0e      	ldr	r3, [pc, #56]	@ (8000380 <DelayMs+0x48>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4a0e      	ldr	r2, [pc, #56]	@ (8000384 <DelayMs+0x4c>)
 800034c:	fba2 2303 	umull	r2, r3, r2, r3
 8000350:	099b      	lsrs	r3, r3, #6
 8000352:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	68ba      	ldr	r2, [r7, #8]
 8000358:	fb02 f303 	mul.w	r3, r2, r3
 800035c:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 800035e:	bf00      	nop
 8000360:	4b06      	ldr	r3, [pc, #24]	@ (800037c <DelayMs+0x44>)
 8000362:	685a      	ldr	r2, [r3, #4]
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	1ad2      	subs	r2, r2, r3
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	429a      	cmp	r2, r3
 800036c:	d3f8      	bcc.n	8000360 <DelayMs+0x28>
}
 800036e:	bf00      	nop
 8000370:	bf00      	nop
 8000372:	3714      	adds	r7, #20
 8000374:	46bd      	mov	sp, r7
 8000376:	bc80      	pop	{r7}
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	e0001000 	.word	0xe0001000
 8000380:	20000000 	.word	0x20000000
 8000384:	10624dd3 	.word	0x10624dd3

08000388 <LcdWriteByte>:
 *      Author: Nilesh
 */

#include "i2c_lcd.h"

void LcdWriteByte(uint8_t val) {
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	4603      	mov	r3, r0
 8000390:	71fb      	strb	r3, [r7, #7]
	I2CStart();
 8000392:	f7ff ff6d 	bl	8000270 <I2CStart>
	I2CSendSlaveAddress(LCD_SLAVE_ADDR_W);
 8000396:	204e      	movs	r0, #78	@ 0x4e
 8000398:	f7ff ff96 	bl	80002c8 <I2CSendSlaveAddress>
	I2CSendData(val);
 800039c:	79fb      	ldrb	r3, [r7, #7]
 800039e:	4618      	mov	r0, r3
 80003a0:	f7ff ffac 	bl	80002fc <I2CSendData>
	I2CStop();
 80003a4:	f7ff ff7a 	bl	800029c <I2CStop>
}
 80003a8:	bf00      	nop
 80003aa:	3708      	adds	r7, #8
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}

080003b0 <LcdWrite>:

void LcdWrite(uint8_t rs, uint8_t val) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	460a      	mov	r2, r1
 80003ba:	71fb      	strb	r3, [r7, #7]
 80003bc:	4613      	mov	r3, r2
 80003be:	71bb      	strb	r3, [r7, #6]
	uint8_t high = val & 0xF0, low = (val << 4) & 0xF0;
 80003c0:	79bb      	ldrb	r3, [r7, #6]
 80003c2:	f023 030f 	bic.w	r3, r3, #15
 80003c6:	73fb      	strb	r3, [r7, #15]
 80003c8:	79bb      	ldrb	r3, [r7, #6]
 80003ca:	011b      	lsls	r3, r3, #4
 80003cc:	73bb      	strb	r3, [r7, #14]
	uint8_t bvrs = (rs == LCD_CMD) ? 0 : BV(LCD_RS);
 80003ce:	79fb      	ldrb	r3, [r7, #7]
 80003d0:	2b80      	cmp	r3, #128	@ 0x80
 80003d2:	bf14      	ite	ne
 80003d4:	2301      	movne	r3, #1
 80003d6:	2300      	moveq	r3, #0
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	737b      	strb	r3, [r7, #13]
	LcdWriteByte(high | bvrs | BV(LCD_EN) | BV(LCD_BL));
 80003dc:	7bfa      	ldrb	r2, [r7, #15]
 80003de:	7b7b      	ldrb	r3, [r7, #13]
 80003e0:	4313      	orrs	r3, r2
 80003e2:	b2db      	uxtb	r3, r3
 80003e4:	f043 030c 	orr.w	r3, r3, #12
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	4618      	mov	r0, r3
 80003ec:	f7ff ffcc 	bl	8000388 <LcdWriteByte>
	DelayMs(1);
 80003f0:	2001      	movs	r0, #1
 80003f2:	f7ff ffa1 	bl	8000338 <DelayMs>
	LcdWriteByte(high | bvrs | BV(LCD_BL));
 80003f6:	7bfa      	ldrb	r2, [r7, #15]
 80003f8:	7b7b      	ldrb	r3, [r7, #13]
 80003fa:	4313      	orrs	r3, r2
 80003fc:	b2db      	uxtb	r3, r3
 80003fe:	f043 0308 	orr.w	r3, r3, #8
 8000402:	b2db      	uxtb	r3, r3
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff ffbf 	bl	8000388 <LcdWriteByte>

	LcdWriteByte(low | bvrs | BV(LCD_EN) | BV(LCD_BL));
 800040a:	7bba      	ldrb	r2, [r7, #14]
 800040c:	7b7b      	ldrb	r3, [r7, #13]
 800040e:	4313      	orrs	r3, r2
 8000410:	b2db      	uxtb	r3, r3
 8000412:	f043 030c 	orr.w	r3, r3, #12
 8000416:	b2db      	uxtb	r3, r3
 8000418:	4618      	mov	r0, r3
 800041a:	f7ff ffb5 	bl	8000388 <LcdWriteByte>
	DelayMs(1);
 800041e:	2001      	movs	r0, #1
 8000420:	f7ff ff8a 	bl	8000338 <DelayMs>
	LcdWriteByte(low | bvrs | BV(LCD_BL));
 8000424:	7bba      	ldrb	r2, [r7, #14]
 8000426:	7b7b      	ldrb	r3, [r7, #13]
 8000428:	4313      	orrs	r3, r2
 800042a:	b2db      	uxtb	r3, r3
 800042c:	f043 0308 	orr.w	r3, r3, #8
 8000430:	b2db      	uxtb	r3, r3
 8000432:	4618      	mov	r0, r3
 8000434:	f7ff ffa8 	bl	8000388 <LcdWriteByte>
}
 8000438:	bf00      	nop
 800043a:	3710      	adds	r7, #16
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}

08000440 <LcdPuts>:
	LcdWrite(LCD_CMD, LCD_DISP_ON);
	DelayMs(1);
	return ret;
}

void LcdPuts(uint8_t line, char str[]) {
 8000440:	b580      	push	{r7, lr}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	4603      	mov	r3, r0
 8000448:	6039      	str	r1, [r7, #0]
 800044a:	71fb      	strb	r3, [r7, #7]
	int i;
	LcdWrite(LCD_CMD, line); // line address
 800044c:	79fb      	ldrb	r3, [r7, #7]
 800044e:	4619      	mov	r1, r3
 8000450:	2080      	movs	r0, #128	@ 0x80
 8000452:	f7ff ffad 	bl	80003b0 <LcdWrite>
	DelayMs(1);
 8000456:	2001      	movs	r0, #1
 8000458:	f7ff ff6e 	bl	8000338 <DelayMs>
	for(i=0; str[i]!='\0'; i++)
 800045c:	2300      	movs	r3, #0
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	e00a      	b.n	8000478 <LcdPuts+0x38>
		LcdWrite(LCD_DATA, str[i]);
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	683a      	ldr	r2, [r7, #0]
 8000466:	4413      	add	r3, r2
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	4619      	mov	r1, r3
 800046c:	2001      	movs	r0, #1
 800046e:	f7ff ff9f 	bl	80003b0 <LcdWrite>
	for(i=0; str[i]!='\0'; i++)
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	3301      	adds	r3, #1
 8000476:	60fb      	str	r3, [r7, #12]
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	683a      	ldr	r2, [r7, #0]
 800047c:	4413      	add	r3, r2
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d1ee      	bne.n	8000462 <LcdPuts+0x22>
}
 8000484:	bf00      	nop
 8000486:	bf00      	nop
 8000488:	3710      	adds	r7, #16
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
	...

08000490 <LedOn>:
	LED_GPIO->PUPDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
	// set gpio pin type as push-pull (in OTYPER)
	LED_GPIO->OTYPER &= ~BV(pin);
}

void LedOn(uint32_t pin) {
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
	// set led pin (in ODR)
	LED_GPIO->ODR |= BV(pin);
 8000498:	4b07      	ldr	r3, [pc, #28]	@ (80004b8 <LedOn+0x28>)
 800049a:	695b      	ldr	r3, [r3, #20]
 800049c:	2101      	movs	r1, #1
 800049e:	687a      	ldr	r2, [r7, #4]
 80004a0:	fa01 f202 	lsl.w	r2, r1, r2
 80004a4:	4611      	mov	r1, r2
 80004a6:	4a04      	ldr	r2, [pc, #16]	@ (80004b8 <LedOn+0x28>)
 80004a8:	430b      	orrs	r3, r1
 80004aa:	6153      	str	r3, [r2, #20]
}
 80004ac:	bf00      	nop
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bc80      	pop	{r7}
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	40020c00 	.word	0x40020c00

080004bc <LedOff>:

void LedOff(uint32_t pin) {
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
	// clear led pin (in ODR)
	LED_GPIO->ODR &= ~BV(pin);
 80004c4:	4b07      	ldr	r3, [pc, #28]	@ (80004e4 <LedOff+0x28>)
 80004c6:	695b      	ldr	r3, [r3, #20]
 80004c8:	2101      	movs	r1, #1
 80004ca:	687a      	ldr	r2, [r7, #4]
 80004cc:	fa01 f202 	lsl.w	r2, r1, r2
 80004d0:	43d2      	mvns	r2, r2
 80004d2:	4611      	mov	r1, r2
 80004d4:	4a03      	ldr	r2, [pc, #12]	@ (80004e4 <LedOff+0x28>)
 80004d6:	400b      	ands	r3, r1
 80004d8:	6153      	str	r3, [r2, #20]
}
 80004da:	bf00      	nop
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr
 80004e4:	40020c00 	.word	0x40020c00

080004e8 <DelayMs>:
static inline void DelayMs(volatile uint32_t ms) {
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80004f0:	4b0e      	ldr	r3, [pc, #56]	@ (800052c <DelayMs+0x44>)
 80004f2:	685b      	ldr	r3, [r3, #4]
 80004f4:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 80004f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000530 <DelayMs+0x48>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000534 <DelayMs+0x4c>)
 80004fc:	fba2 2303 	umull	r2, r3, r2, r3
 8000500:	099b      	lsrs	r3, r3, #6
 8000502:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	68ba      	ldr	r2, [r7, #8]
 8000508:	fb02 f303 	mul.w	r3, r2, r3
 800050c:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 800050e:	bf00      	nop
 8000510:	4b06      	ldr	r3, [pc, #24]	@ (800052c <DelayMs+0x44>)
 8000512:	685a      	ldr	r2, [r3, #4]
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	1ad2      	subs	r2, r2, r3
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	429a      	cmp	r2, r3
 800051c:	d3f8      	bcc.n	8000510 <DelayMs+0x28>
}
 800051e:	bf00      	nop
 8000520:	bf00      	nop
 8000522:	3714      	adds	r7, #20
 8000524:	46bd      	mov	sp, r7
 8000526:	bc80      	pop	{r7}
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	e0001000 	.word	0xe0001000
 8000530:	20000000 	.word	0x20000000
 8000534:	10624dd3 	.word	0x10624dd3

08000538 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af00      	add	r7, sp, #0
	int cnt = 0;
 800053e:	2300      	movs	r3, #0
 8000540:	617b      	str	r3, [r7, #20]
				char str[16];
				sprintf(str, "CNT = %d", cnt);
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	697a      	ldr	r2, [r7, #20]
 8000546:	490a      	ldr	r1, [pc, #40]	@ (8000570 <main+0x38>)
 8000548:	4618      	mov	r0, r3
 800054a:	f000 f8cf 	bl	80006ec <siprintf>
				cnt++;
 800054e:	697b      	ldr	r3, [r7, #20]
 8000550:	3301      	adds	r3, #1
 8000552:	617b      	str	r3, [r7, #20]
				LcdPuts(LCD_LINE2, str);
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	4619      	mov	r1, r3
 8000558:	20c0      	movs	r0, #192	@ 0xc0
 800055a:	f7ff ff71 	bl	8000440 <LcdPuts>
				DelayMs(100);
 800055e:	2064      	movs	r0, #100	@ 0x64
 8000560:	f7ff ffc2 	bl	80004e8 <DelayMs>
 8000564:	2300      	movs	r3, #0
}
 8000566:	4618      	mov	r0, r3
 8000568:	3718      	adds	r7, #24
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	08001034 	.word	0x08001034

08000574 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800057c:	4a14      	ldr	r2, [pc, #80]	@ (80005d0 <_sbrk+0x5c>)
 800057e:	4b15      	ldr	r3, [pc, #84]	@ (80005d4 <_sbrk+0x60>)
 8000580:	1ad3      	subs	r3, r2, r3
 8000582:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000584:	697b      	ldr	r3, [r7, #20]
 8000586:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000588:	4b13      	ldr	r3, [pc, #76]	@ (80005d8 <_sbrk+0x64>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d102      	bne.n	8000596 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000590:	4b11      	ldr	r3, [pc, #68]	@ (80005d8 <_sbrk+0x64>)
 8000592:	4a12      	ldr	r2, [pc, #72]	@ (80005dc <_sbrk+0x68>)
 8000594:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000596:	4b10      	ldr	r3, [pc, #64]	@ (80005d8 <_sbrk+0x64>)
 8000598:	681a      	ldr	r2, [r3, #0]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4413      	add	r3, r2
 800059e:	693a      	ldr	r2, [r7, #16]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d207      	bcs.n	80005b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005a4:	f000 f8c2 	bl	800072c <__errno>
 80005a8:	4603      	mov	r3, r0
 80005aa:	220c      	movs	r2, #12
 80005ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005b2:	e009      	b.n	80005c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005b4:	4b08      	ldr	r3, [pc, #32]	@ (80005d8 <_sbrk+0x64>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005ba:	4b07      	ldr	r3, [pc, #28]	@ (80005d8 <_sbrk+0x64>)
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4413      	add	r3, r2
 80005c2:	4a05      	ldr	r2, [pc, #20]	@ (80005d8 <_sbrk+0x64>)
 80005c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005c6:	68fb      	ldr	r3, [r7, #12]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3718      	adds	r7, #24
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20020000 	.word	0x20020000
 80005d4:	00000400 	.word	0x00000400
 80005d8:	20000070 	.word	0x20000070
 80005dc:	200001c0 	.word	0x200001c0

080005e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  DWT_Init();
 80005e4:	f000 f802 	bl	80005ec <DWT_Init>
}
 80005e8:	bf00      	nop
 80005ea:	bd80      	pop	{r7, pc}

080005ec <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80005f0:	4b14      	ldr	r3, [pc, #80]	@ (8000644 <DWT_Init+0x58>)
 80005f2:	68db      	ldr	r3, [r3, #12]
 80005f4:	4a13      	ldr	r2, [pc, #76]	@ (8000644 <DWT_Init+0x58>)
 80005f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80005fa:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80005fc:	4b11      	ldr	r3, [pc, #68]	@ (8000644 <DWT_Init+0x58>)
 80005fe:	68db      	ldr	r3, [r3, #12]
 8000600:	4a10      	ldr	r2, [pc, #64]	@ (8000644 <DWT_Init+0x58>)
 8000602:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000606:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000608:	4b0f      	ldr	r3, [pc, #60]	@ (8000648 <DWT_Init+0x5c>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a0e      	ldr	r2, [pc, #56]	@ (8000648 <DWT_Init+0x5c>)
 800060e:	f023 0301 	bic.w	r3, r3, #1
 8000612:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000614:	4b0c      	ldr	r3, [pc, #48]	@ (8000648 <DWT_Init+0x5c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a0b      	ldr	r2, [pc, #44]	@ (8000648 <DWT_Init+0x5c>)
 800061a:	f043 0301 	orr.w	r3, r3, #1
 800061e:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000620:	4b09      	ldr	r3, [pc, #36]	@ (8000648 <DWT_Init+0x5c>)
 8000622:	2200      	movs	r2, #0
 8000624:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000626:	bf00      	nop
    __ASM volatile ("NOP");
 8000628:	bf00      	nop
    __ASM volatile ("NOP");
 800062a:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 800062c:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <DWT_Init+0x5c>)
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	2b00      	cmp	r3, #0
 8000632:	bf0c      	ite	eq
 8000634:	2301      	moveq	r3, #1
 8000636:	2300      	movne	r3, #0
 8000638:	b2db      	uxtb	r3, r3
}
 800063a:	4618      	mov	r0, r3
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	e000edf0 	.word	0xe000edf0
 8000648:	e0001000 	.word	0xe0001000

0800064c <TIM6_DAC_IRQHandler>:
	TIM6->CR1 |= TIM_CR1_CEN;
}

// implement timer ISR
void TIM6_DAC_IRQHandler(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	static int flag = 0;
	// check if interrupt occurred
	if(TIM6->SR & TIM_SR_UIF) {
 8000650:	4b0f      	ldr	r3, [pc, #60]	@ (8000690 <TIM6_DAC_IRQHandler+0x44>)
 8000652:	691b      	ldr	r3, [r3, #16]
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d016      	beq.n	800068a <TIM6_DAC_IRQHandler+0x3e>
		// then clear (ack) the interrupt
		TIM6->SR &= ~TIM_SR_UIF;
 800065c:	4b0c      	ldr	r3, [pc, #48]	@ (8000690 <TIM6_DAC_IRQHandler+0x44>)
 800065e:	691b      	ldr	r3, [r3, #16]
 8000660:	4a0b      	ldr	r2, [pc, #44]	@ (8000690 <TIM6_DAC_IRQHandler+0x44>)
 8000662:	f023 0301 	bic.w	r3, r3, #1
 8000666:	6113      	str	r3, [r2, #16]
		// toggle LED
		if(flag == 0) {
 8000668:	4b0a      	ldr	r3, [pc, #40]	@ (8000694 <TIM6_DAC_IRQHandler+0x48>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d106      	bne.n	800067e <TIM6_DAC_IRQHandler+0x32>
			LedOn(LED_BLUE);
 8000670:	200f      	movs	r0, #15
 8000672:	f7ff ff0d 	bl	8000490 <LedOn>
			flag = 1;
 8000676:	4b07      	ldr	r3, [pc, #28]	@ (8000694 <TIM6_DAC_IRQHandler+0x48>)
 8000678:	2201      	movs	r2, #1
 800067a:	601a      	str	r2, [r3, #0]
		} else {
			LedOff(LED_BLUE);
			flag = 0;
		}
	}
}
 800067c:	e005      	b.n	800068a <TIM6_DAC_IRQHandler+0x3e>
			LedOff(LED_BLUE);
 800067e:	200f      	movs	r0, #15
 8000680:	f7ff ff1c 	bl	80004bc <LedOff>
			flag = 0;
 8000684:	4b03      	ldr	r3, [pc, #12]	@ (8000694 <TIM6_DAC_IRQHandler+0x48>)
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40001000 	.word	0x40001000
 8000694:	20000074 	.word	0x20000074

08000698 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000698:	480d      	ldr	r0, [pc, #52]	@ (80006d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800069a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800069c:	f7ff ffa0 	bl	80005e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a0:	480c      	ldr	r0, [pc, #48]	@ (80006d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80006a2:	490d      	ldr	r1, [pc, #52]	@ (80006d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006a4:	4a0d      	ldr	r2, [pc, #52]	@ (80006dc <LoopForever+0xe>)
  movs r3, #0
 80006a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a8:	e002      	b.n	80006b0 <LoopCopyDataInit>

080006aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ae:	3304      	adds	r3, #4

080006b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b4:	d3f9      	bcc.n	80006aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006b6:	4a0a      	ldr	r2, [pc, #40]	@ (80006e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006b8:	4c0a      	ldr	r4, [pc, #40]	@ (80006e4 <LoopForever+0x16>)
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006bc:	e001      	b.n	80006c2 <LoopFillZerobss>

080006be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c0:	3204      	adds	r2, #4

080006c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c4:	d3fb      	bcc.n	80006be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006c6:	f000 f837 	bl	8000738 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ca:	f7ff ff35 	bl	8000538 <main>

080006ce <LoopForever>:

LoopForever:
  b LoopForever
 80006ce:	e7fe      	b.n	80006ce <LoopForever>
  ldr   r0, =_estack
 80006d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d8:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80006dc:	08001080 	.word	0x08001080
  ldr r2, =_sbss
 80006e0:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 80006e4:	200001c0 	.word	0x200001c0

080006e8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006e8:	e7fe      	b.n	80006e8 <ADC_IRQHandler>
	...

080006ec <siprintf>:
 80006ec:	b40e      	push	{r1, r2, r3}
 80006ee:	b500      	push	{lr}
 80006f0:	b09c      	sub	sp, #112	@ 0x70
 80006f2:	ab1d      	add	r3, sp, #116	@ 0x74
 80006f4:	9002      	str	r0, [sp, #8]
 80006f6:	9006      	str	r0, [sp, #24]
 80006f8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80006fc:	4809      	ldr	r0, [pc, #36]	@ (8000724 <siprintf+0x38>)
 80006fe:	9107      	str	r1, [sp, #28]
 8000700:	9104      	str	r1, [sp, #16]
 8000702:	4909      	ldr	r1, [pc, #36]	@ (8000728 <siprintf+0x3c>)
 8000704:	f853 2b04 	ldr.w	r2, [r3], #4
 8000708:	9105      	str	r1, [sp, #20]
 800070a:	6800      	ldr	r0, [r0, #0]
 800070c:	9301      	str	r3, [sp, #4]
 800070e:	a902      	add	r1, sp, #8
 8000710:	f000 f98c 	bl	8000a2c <_svfiprintf_r>
 8000714:	9b02      	ldr	r3, [sp, #8]
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]
 800071a:	b01c      	add	sp, #112	@ 0x70
 800071c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000720:	b003      	add	sp, #12
 8000722:	4770      	bx	lr
 8000724:	20000004 	.word	0x20000004
 8000728:	ffff0208 	.word	0xffff0208

0800072c <__errno>:
 800072c:	4b01      	ldr	r3, [pc, #4]	@ (8000734 <__errno+0x8>)
 800072e:	6818      	ldr	r0, [r3, #0]
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	20000004 	.word	0x20000004

08000738 <__libc_init_array>:
 8000738:	b570      	push	{r4, r5, r6, lr}
 800073a:	4d0d      	ldr	r5, [pc, #52]	@ (8000770 <__libc_init_array+0x38>)
 800073c:	4c0d      	ldr	r4, [pc, #52]	@ (8000774 <__libc_init_array+0x3c>)
 800073e:	1b64      	subs	r4, r4, r5
 8000740:	10a4      	asrs	r4, r4, #2
 8000742:	2600      	movs	r6, #0
 8000744:	42a6      	cmp	r6, r4
 8000746:	d109      	bne.n	800075c <__libc_init_array+0x24>
 8000748:	4d0b      	ldr	r5, [pc, #44]	@ (8000778 <__libc_init_array+0x40>)
 800074a:	4c0c      	ldr	r4, [pc, #48]	@ (800077c <__libc_init_array+0x44>)
 800074c:	f000 fc66 	bl	800101c <_init>
 8000750:	1b64      	subs	r4, r4, r5
 8000752:	10a4      	asrs	r4, r4, #2
 8000754:	2600      	movs	r6, #0
 8000756:	42a6      	cmp	r6, r4
 8000758:	d105      	bne.n	8000766 <__libc_init_array+0x2e>
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000760:	4798      	blx	r3
 8000762:	3601      	adds	r6, #1
 8000764:	e7ee      	b.n	8000744 <__libc_init_array+0xc>
 8000766:	f855 3b04 	ldr.w	r3, [r5], #4
 800076a:	4798      	blx	r3
 800076c:	3601      	adds	r6, #1
 800076e:	e7f2      	b.n	8000756 <__libc_init_array+0x1e>
 8000770:	08001078 	.word	0x08001078
 8000774:	08001078 	.word	0x08001078
 8000778:	08001078 	.word	0x08001078
 800077c:	0800107c 	.word	0x0800107c

08000780 <__retarget_lock_acquire_recursive>:
 8000780:	4770      	bx	lr

08000782 <__retarget_lock_release_recursive>:
 8000782:	4770      	bx	lr

08000784 <_free_r>:
 8000784:	b538      	push	{r3, r4, r5, lr}
 8000786:	4605      	mov	r5, r0
 8000788:	2900      	cmp	r1, #0
 800078a:	d041      	beq.n	8000810 <_free_r+0x8c>
 800078c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000790:	1f0c      	subs	r4, r1, #4
 8000792:	2b00      	cmp	r3, #0
 8000794:	bfb8      	it	lt
 8000796:	18e4      	addlt	r4, r4, r3
 8000798:	f000 f8e0 	bl	800095c <__malloc_lock>
 800079c:	4a1d      	ldr	r2, [pc, #116]	@ (8000814 <_free_r+0x90>)
 800079e:	6813      	ldr	r3, [r2, #0]
 80007a0:	b933      	cbnz	r3, 80007b0 <_free_r+0x2c>
 80007a2:	6063      	str	r3, [r4, #4]
 80007a4:	6014      	str	r4, [r2, #0]
 80007a6:	4628      	mov	r0, r5
 80007a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80007ac:	f000 b8dc 	b.w	8000968 <__malloc_unlock>
 80007b0:	42a3      	cmp	r3, r4
 80007b2:	d908      	bls.n	80007c6 <_free_r+0x42>
 80007b4:	6820      	ldr	r0, [r4, #0]
 80007b6:	1821      	adds	r1, r4, r0
 80007b8:	428b      	cmp	r3, r1
 80007ba:	bf01      	itttt	eq
 80007bc:	6819      	ldreq	r1, [r3, #0]
 80007be:	685b      	ldreq	r3, [r3, #4]
 80007c0:	1809      	addeq	r1, r1, r0
 80007c2:	6021      	streq	r1, [r4, #0]
 80007c4:	e7ed      	b.n	80007a2 <_free_r+0x1e>
 80007c6:	461a      	mov	r2, r3
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	b10b      	cbz	r3, 80007d0 <_free_r+0x4c>
 80007cc:	42a3      	cmp	r3, r4
 80007ce:	d9fa      	bls.n	80007c6 <_free_r+0x42>
 80007d0:	6811      	ldr	r1, [r2, #0]
 80007d2:	1850      	adds	r0, r2, r1
 80007d4:	42a0      	cmp	r0, r4
 80007d6:	d10b      	bne.n	80007f0 <_free_r+0x6c>
 80007d8:	6820      	ldr	r0, [r4, #0]
 80007da:	4401      	add	r1, r0
 80007dc:	1850      	adds	r0, r2, r1
 80007de:	4283      	cmp	r3, r0
 80007e0:	6011      	str	r1, [r2, #0]
 80007e2:	d1e0      	bne.n	80007a6 <_free_r+0x22>
 80007e4:	6818      	ldr	r0, [r3, #0]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	6053      	str	r3, [r2, #4]
 80007ea:	4408      	add	r0, r1
 80007ec:	6010      	str	r0, [r2, #0]
 80007ee:	e7da      	b.n	80007a6 <_free_r+0x22>
 80007f0:	d902      	bls.n	80007f8 <_free_r+0x74>
 80007f2:	230c      	movs	r3, #12
 80007f4:	602b      	str	r3, [r5, #0]
 80007f6:	e7d6      	b.n	80007a6 <_free_r+0x22>
 80007f8:	6820      	ldr	r0, [r4, #0]
 80007fa:	1821      	adds	r1, r4, r0
 80007fc:	428b      	cmp	r3, r1
 80007fe:	bf04      	itt	eq
 8000800:	6819      	ldreq	r1, [r3, #0]
 8000802:	685b      	ldreq	r3, [r3, #4]
 8000804:	6063      	str	r3, [r4, #4]
 8000806:	bf04      	itt	eq
 8000808:	1809      	addeq	r1, r1, r0
 800080a:	6021      	streq	r1, [r4, #0]
 800080c:	6054      	str	r4, [r2, #4]
 800080e:	e7ca      	b.n	80007a6 <_free_r+0x22>
 8000810:	bd38      	pop	{r3, r4, r5, pc}
 8000812:	bf00      	nop
 8000814:	200001bc 	.word	0x200001bc

08000818 <sbrk_aligned>:
 8000818:	b570      	push	{r4, r5, r6, lr}
 800081a:	4e0f      	ldr	r6, [pc, #60]	@ (8000858 <sbrk_aligned+0x40>)
 800081c:	460c      	mov	r4, r1
 800081e:	6831      	ldr	r1, [r6, #0]
 8000820:	4605      	mov	r5, r0
 8000822:	b911      	cbnz	r1, 800082a <sbrk_aligned+0x12>
 8000824:	f000 fba6 	bl	8000f74 <_sbrk_r>
 8000828:	6030      	str	r0, [r6, #0]
 800082a:	4621      	mov	r1, r4
 800082c:	4628      	mov	r0, r5
 800082e:	f000 fba1 	bl	8000f74 <_sbrk_r>
 8000832:	1c43      	adds	r3, r0, #1
 8000834:	d103      	bne.n	800083e <sbrk_aligned+0x26>
 8000836:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800083a:	4620      	mov	r0, r4
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	1cc4      	adds	r4, r0, #3
 8000840:	f024 0403 	bic.w	r4, r4, #3
 8000844:	42a0      	cmp	r0, r4
 8000846:	d0f8      	beq.n	800083a <sbrk_aligned+0x22>
 8000848:	1a21      	subs	r1, r4, r0
 800084a:	4628      	mov	r0, r5
 800084c:	f000 fb92 	bl	8000f74 <_sbrk_r>
 8000850:	3001      	adds	r0, #1
 8000852:	d1f2      	bne.n	800083a <sbrk_aligned+0x22>
 8000854:	e7ef      	b.n	8000836 <sbrk_aligned+0x1e>
 8000856:	bf00      	nop
 8000858:	200001b8 	.word	0x200001b8

0800085c <_malloc_r>:
 800085c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000860:	1ccd      	adds	r5, r1, #3
 8000862:	f025 0503 	bic.w	r5, r5, #3
 8000866:	3508      	adds	r5, #8
 8000868:	2d0c      	cmp	r5, #12
 800086a:	bf38      	it	cc
 800086c:	250c      	movcc	r5, #12
 800086e:	2d00      	cmp	r5, #0
 8000870:	4606      	mov	r6, r0
 8000872:	db01      	blt.n	8000878 <_malloc_r+0x1c>
 8000874:	42a9      	cmp	r1, r5
 8000876:	d904      	bls.n	8000882 <_malloc_r+0x26>
 8000878:	230c      	movs	r3, #12
 800087a:	6033      	str	r3, [r6, #0]
 800087c:	2000      	movs	r0, #0
 800087e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000882:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000958 <_malloc_r+0xfc>
 8000886:	f000 f869 	bl	800095c <__malloc_lock>
 800088a:	f8d8 3000 	ldr.w	r3, [r8]
 800088e:	461c      	mov	r4, r3
 8000890:	bb44      	cbnz	r4, 80008e4 <_malloc_r+0x88>
 8000892:	4629      	mov	r1, r5
 8000894:	4630      	mov	r0, r6
 8000896:	f7ff ffbf 	bl	8000818 <sbrk_aligned>
 800089a:	1c43      	adds	r3, r0, #1
 800089c:	4604      	mov	r4, r0
 800089e:	d158      	bne.n	8000952 <_malloc_r+0xf6>
 80008a0:	f8d8 4000 	ldr.w	r4, [r8]
 80008a4:	4627      	mov	r7, r4
 80008a6:	2f00      	cmp	r7, #0
 80008a8:	d143      	bne.n	8000932 <_malloc_r+0xd6>
 80008aa:	2c00      	cmp	r4, #0
 80008ac:	d04b      	beq.n	8000946 <_malloc_r+0xea>
 80008ae:	6823      	ldr	r3, [r4, #0]
 80008b0:	4639      	mov	r1, r7
 80008b2:	4630      	mov	r0, r6
 80008b4:	eb04 0903 	add.w	r9, r4, r3
 80008b8:	f000 fb5c 	bl	8000f74 <_sbrk_r>
 80008bc:	4581      	cmp	r9, r0
 80008be:	d142      	bne.n	8000946 <_malloc_r+0xea>
 80008c0:	6821      	ldr	r1, [r4, #0]
 80008c2:	1a6d      	subs	r5, r5, r1
 80008c4:	4629      	mov	r1, r5
 80008c6:	4630      	mov	r0, r6
 80008c8:	f7ff ffa6 	bl	8000818 <sbrk_aligned>
 80008cc:	3001      	adds	r0, #1
 80008ce:	d03a      	beq.n	8000946 <_malloc_r+0xea>
 80008d0:	6823      	ldr	r3, [r4, #0]
 80008d2:	442b      	add	r3, r5
 80008d4:	6023      	str	r3, [r4, #0]
 80008d6:	f8d8 3000 	ldr.w	r3, [r8]
 80008da:	685a      	ldr	r2, [r3, #4]
 80008dc:	bb62      	cbnz	r2, 8000938 <_malloc_r+0xdc>
 80008de:	f8c8 7000 	str.w	r7, [r8]
 80008e2:	e00f      	b.n	8000904 <_malloc_r+0xa8>
 80008e4:	6822      	ldr	r2, [r4, #0]
 80008e6:	1b52      	subs	r2, r2, r5
 80008e8:	d420      	bmi.n	800092c <_malloc_r+0xd0>
 80008ea:	2a0b      	cmp	r2, #11
 80008ec:	d917      	bls.n	800091e <_malloc_r+0xc2>
 80008ee:	1961      	adds	r1, r4, r5
 80008f0:	42a3      	cmp	r3, r4
 80008f2:	6025      	str	r5, [r4, #0]
 80008f4:	bf18      	it	ne
 80008f6:	6059      	strne	r1, [r3, #4]
 80008f8:	6863      	ldr	r3, [r4, #4]
 80008fa:	bf08      	it	eq
 80008fc:	f8c8 1000 	streq.w	r1, [r8]
 8000900:	5162      	str	r2, [r4, r5]
 8000902:	604b      	str	r3, [r1, #4]
 8000904:	4630      	mov	r0, r6
 8000906:	f000 f82f 	bl	8000968 <__malloc_unlock>
 800090a:	f104 000b 	add.w	r0, r4, #11
 800090e:	1d23      	adds	r3, r4, #4
 8000910:	f020 0007 	bic.w	r0, r0, #7
 8000914:	1ac2      	subs	r2, r0, r3
 8000916:	bf1c      	itt	ne
 8000918:	1a1b      	subne	r3, r3, r0
 800091a:	50a3      	strne	r3, [r4, r2]
 800091c:	e7af      	b.n	800087e <_malloc_r+0x22>
 800091e:	6862      	ldr	r2, [r4, #4]
 8000920:	42a3      	cmp	r3, r4
 8000922:	bf0c      	ite	eq
 8000924:	f8c8 2000 	streq.w	r2, [r8]
 8000928:	605a      	strne	r2, [r3, #4]
 800092a:	e7eb      	b.n	8000904 <_malloc_r+0xa8>
 800092c:	4623      	mov	r3, r4
 800092e:	6864      	ldr	r4, [r4, #4]
 8000930:	e7ae      	b.n	8000890 <_malloc_r+0x34>
 8000932:	463c      	mov	r4, r7
 8000934:	687f      	ldr	r7, [r7, #4]
 8000936:	e7b6      	b.n	80008a6 <_malloc_r+0x4a>
 8000938:	461a      	mov	r2, r3
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	42a3      	cmp	r3, r4
 800093e:	d1fb      	bne.n	8000938 <_malloc_r+0xdc>
 8000940:	2300      	movs	r3, #0
 8000942:	6053      	str	r3, [r2, #4]
 8000944:	e7de      	b.n	8000904 <_malloc_r+0xa8>
 8000946:	230c      	movs	r3, #12
 8000948:	6033      	str	r3, [r6, #0]
 800094a:	4630      	mov	r0, r6
 800094c:	f000 f80c 	bl	8000968 <__malloc_unlock>
 8000950:	e794      	b.n	800087c <_malloc_r+0x20>
 8000952:	6005      	str	r5, [r0, #0]
 8000954:	e7d6      	b.n	8000904 <_malloc_r+0xa8>
 8000956:	bf00      	nop
 8000958:	200001bc 	.word	0x200001bc

0800095c <__malloc_lock>:
 800095c:	4801      	ldr	r0, [pc, #4]	@ (8000964 <__malloc_lock+0x8>)
 800095e:	f7ff bf0f 	b.w	8000780 <__retarget_lock_acquire_recursive>
 8000962:	bf00      	nop
 8000964:	200001b4 	.word	0x200001b4

08000968 <__malloc_unlock>:
 8000968:	4801      	ldr	r0, [pc, #4]	@ (8000970 <__malloc_unlock+0x8>)
 800096a:	f7ff bf0a 	b.w	8000782 <__retarget_lock_release_recursive>
 800096e:	bf00      	nop
 8000970:	200001b4 	.word	0x200001b4

08000974 <__ssputs_r>:
 8000974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000978:	688e      	ldr	r6, [r1, #8]
 800097a:	461f      	mov	r7, r3
 800097c:	42be      	cmp	r6, r7
 800097e:	680b      	ldr	r3, [r1, #0]
 8000980:	4682      	mov	sl, r0
 8000982:	460c      	mov	r4, r1
 8000984:	4690      	mov	r8, r2
 8000986:	d82d      	bhi.n	80009e4 <__ssputs_r+0x70>
 8000988:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800098c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000990:	d026      	beq.n	80009e0 <__ssputs_r+0x6c>
 8000992:	6965      	ldr	r5, [r4, #20]
 8000994:	6909      	ldr	r1, [r1, #16]
 8000996:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800099a:	eba3 0901 	sub.w	r9, r3, r1
 800099e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80009a2:	1c7b      	adds	r3, r7, #1
 80009a4:	444b      	add	r3, r9
 80009a6:	106d      	asrs	r5, r5, #1
 80009a8:	429d      	cmp	r5, r3
 80009aa:	bf38      	it	cc
 80009ac:	461d      	movcc	r5, r3
 80009ae:	0553      	lsls	r3, r2, #21
 80009b0:	d527      	bpl.n	8000a02 <__ssputs_r+0x8e>
 80009b2:	4629      	mov	r1, r5
 80009b4:	f7ff ff52 	bl	800085c <_malloc_r>
 80009b8:	4606      	mov	r6, r0
 80009ba:	b360      	cbz	r0, 8000a16 <__ssputs_r+0xa2>
 80009bc:	6921      	ldr	r1, [r4, #16]
 80009be:	464a      	mov	r2, r9
 80009c0:	f000 fae8 	bl	8000f94 <memcpy>
 80009c4:	89a3      	ldrh	r3, [r4, #12]
 80009c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80009ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009ce:	81a3      	strh	r3, [r4, #12]
 80009d0:	6126      	str	r6, [r4, #16]
 80009d2:	6165      	str	r5, [r4, #20]
 80009d4:	444e      	add	r6, r9
 80009d6:	eba5 0509 	sub.w	r5, r5, r9
 80009da:	6026      	str	r6, [r4, #0]
 80009dc:	60a5      	str	r5, [r4, #8]
 80009de:	463e      	mov	r6, r7
 80009e0:	42be      	cmp	r6, r7
 80009e2:	d900      	bls.n	80009e6 <__ssputs_r+0x72>
 80009e4:	463e      	mov	r6, r7
 80009e6:	6820      	ldr	r0, [r4, #0]
 80009e8:	4632      	mov	r2, r6
 80009ea:	4641      	mov	r1, r8
 80009ec:	f000 faa8 	bl	8000f40 <memmove>
 80009f0:	68a3      	ldr	r3, [r4, #8]
 80009f2:	1b9b      	subs	r3, r3, r6
 80009f4:	60a3      	str	r3, [r4, #8]
 80009f6:	6823      	ldr	r3, [r4, #0]
 80009f8:	4433      	add	r3, r6
 80009fa:	6023      	str	r3, [r4, #0]
 80009fc:	2000      	movs	r0, #0
 80009fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a02:	462a      	mov	r2, r5
 8000a04:	f000 fad4 	bl	8000fb0 <_realloc_r>
 8000a08:	4606      	mov	r6, r0
 8000a0a:	2800      	cmp	r0, #0
 8000a0c:	d1e0      	bne.n	80009d0 <__ssputs_r+0x5c>
 8000a0e:	6921      	ldr	r1, [r4, #16]
 8000a10:	4650      	mov	r0, sl
 8000a12:	f7ff feb7 	bl	8000784 <_free_r>
 8000a16:	230c      	movs	r3, #12
 8000a18:	f8ca 3000 	str.w	r3, [sl]
 8000a1c:	89a3      	ldrh	r3, [r4, #12]
 8000a1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a22:	81a3      	strh	r3, [r4, #12]
 8000a24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a28:	e7e9      	b.n	80009fe <__ssputs_r+0x8a>
	...

08000a2c <_svfiprintf_r>:
 8000a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a30:	4698      	mov	r8, r3
 8000a32:	898b      	ldrh	r3, [r1, #12]
 8000a34:	061b      	lsls	r3, r3, #24
 8000a36:	b09d      	sub	sp, #116	@ 0x74
 8000a38:	4607      	mov	r7, r0
 8000a3a:	460d      	mov	r5, r1
 8000a3c:	4614      	mov	r4, r2
 8000a3e:	d510      	bpl.n	8000a62 <_svfiprintf_r+0x36>
 8000a40:	690b      	ldr	r3, [r1, #16]
 8000a42:	b973      	cbnz	r3, 8000a62 <_svfiprintf_r+0x36>
 8000a44:	2140      	movs	r1, #64	@ 0x40
 8000a46:	f7ff ff09 	bl	800085c <_malloc_r>
 8000a4a:	6028      	str	r0, [r5, #0]
 8000a4c:	6128      	str	r0, [r5, #16]
 8000a4e:	b930      	cbnz	r0, 8000a5e <_svfiprintf_r+0x32>
 8000a50:	230c      	movs	r3, #12
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a58:	b01d      	add	sp, #116	@ 0x74
 8000a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a5e:	2340      	movs	r3, #64	@ 0x40
 8000a60:	616b      	str	r3, [r5, #20]
 8000a62:	2300      	movs	r3, #0
 8000a64:	9309      	str	r3, [sp, #36]	@ 0x24
 8000a66:	2320      	movs	r3, #32
 8000a68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000a6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8000a70:	2330      	movs	r3, #48	@ 0x30
 8000a72:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000c10 <_svfiprintf_r+0x1e4>
 8000a76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000a7a:	f04f 0901 	mov.w	r9, #1
 8000a7e:	4623      	mov	r3, r4
 8000a80:	469a      	mov	sl, r3
 8000a82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000a86:	b10a      	cbz	r2, 8000a8c <_svfiprintf_r+0x60>
 8000a88:	2a25      	cmp	r2, #37	@ 0x25
 8000a8a:	d1f9      	bne.n	8000a80 <_svfiprintf_r+0x54>
 8000a8c:	ebba 0b04 	subs.w	fp, sl, r4
 8000a90:	d00b      	beq.n	8000aaa <_svfiprintf_r+0x7e>
 8000a92:	465b      	mov	r3, fp
 8000a94:	4622      	mov	r2, r4
 8000a96:	4629      	mov	r1, r5
 8000a98:	4638      	mov	r0, r7
 8000a9a:	f7ff ff6b 	bl	8000974 <__ssputs_r>
 8000a9e:	3001      	adds	r0, #1
 8000aa0:	f000 80a7 	beq.w	8000bf2 <_svfiprintf_r+0x1c6>
 8000aa4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000aa6:	445a      	add	r2, fp
 8000aa8:	9209      	str	r2, [sp, #36]	@ 0x24
 8000aaa:	f89a 3000 	ldrb.w	r3, [sl]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	f000 809f 	beq.w	8000bf2 <_svfiprintf_r+0x1c6>
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000aba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000abe:	f10a 0a01 	add.w	sl, sl, #1
 8000ac2:	9304      	str	r3, [sp, #16]
 8000ac4:	9307      	str	r3, [sp, #28]
 8000ac6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000aca:	931a      	str	r3, [sp, #104]	@ 0x68
 8000acc:	4654      	mov	r4, sl
 8000ace:	2205      	movs	r2, #5
 8000ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ad4:	484e      	ldr	r0, [pc, #312]	@ (8000c10 <_svfiprintf_r+0x1e4>)
 8000ad6:	f7ff fb7b 	bl	80001d0 <memchr>
 8000ada:	9a04      	ldr	r2, [sp, #16]
 8000adc:	b9d8      	cbnz	r0, 8000b16 <_svfiprintf_r+0xea>
 8000ade:	06d0      	lsls	r0, r2, #27
 8000ae0:	bf44      	itt	mi
 8000ae2:	2320      	movmi	r3, #32
 8000ae4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000ae8:	0711      	lsls	r1, r2, #28
 8000aea:	bf44      	itt	mi
 8000aec:	232b      	movmi	r3, #43	@ 0x2b
 8000aee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000af2:	f89a 3000 	ldrb.w	r3, [sl]
 8000af6:	2b2a      	cmp	r3, #42	@ 0x2a
 8000af8:	d015      	beq.n	8000b26 <_svfiprintf_r+0xfa>
 8000afa:	9a07      	ldr	r2, [sp, #28]
 8000afc:	4654      	mov	r4, sl
 8000afe:	2000      	movs	r0, #0
 8000b00:	f04f 0c0a 	mov.w	ip, #10
 8000b04:	4621      	mov	r1, r4
 8000b06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000b0a:	3b30      	subs	r3, #48	@ 0x30
 8000b0c:	2b09      	cmp	r3, #9
 8000b0e:	d94b      	bls.n	8000ba8 <_svfiprintf_r+0x17c>
 8000b10:	b1b0      	cbz	r0, 8000b40 <_svfiprintf_r+0x114>
 8000b12:	9207      	str	r2, [sp, #28]
 8000b14:	e014      	b.n	8000b40 <_svfiprintf_r+0x114>
 8000b16:	eba0 0308 	sub.w	r3, r0, r8
 8000b1a:	fa09 f303 	lsl.w	r3, r9, r3
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	9304      	str	r3, [sp, #16]
 8000b22:	46a2      	mov	sl, r4
 8000b24:	e7d2      	b.n	8000acc <_svfiprintf_r+0xa0>
 8000b26:	9b03      	ldr	r3, [sp, #12]
 8000b28:	1d19      	adds	r1, r3, #4
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	9103      	str	r1, [sp, #12]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	bfbb      	ittet	lt
 8000b32:	425b      	neglt	r3, r3
 8000b34:	f042 0202 	orrlt.w	r2, r2, #2
 8000b38:	9307      	strge	r3, [sp, #28]
 8000b3a:	9307      	strlt	r3, [sp, #28]
 8000b3c:	bfb8      	it	lt
 8000b3e:	9204      	strlt	r2, [sp, #16]
 8000b40:	7823      	ldrb	r3, [r4, #0]
 8000b42:	2b2e      	cmp	r3, #46	@ 0x2e
 8000b44:	d10a      	bne.n	8000b5c <_svfiprintf_r+0x130>
 8000b46:	7863      	ldrb	r3, [r4, #1]
 8000b48:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b4a:	d132      	bne.n	8000bb2 <_svfiprintf_r+0x186>
 8000b4c:	9b03      	ldr	r3, [sp, #12]
 8000b4e:	1d1a      	adds	r2, r3, #4
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	9203      	str	r2, [sp, #12]
 8000b54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000b58:	3402      	adds	r4, #2
 8000b5a:	9305      	str	r3, [sp, #20]
 8000b5c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8000c14 <_svfiprintf_r+0x1e8>
 8000b60:	7821      	ldrb	r1, [r4, #0]
 8000b62:	2203      	movs	r2, #3
 8000b64:	4650      	mov	r0, sl
 8000b66:	f7ff fb33 	bl	80001d0 <memchr>
 8000b6a:	b138      	cbz	r0, 8000b7c <_svfiprintf_r+0x150>
 8000b6c:	9b04      	ldr	r3, [sp, #16]
 8000b6e:	eba0 000a 	sub.w	r0, r0, sl
 8000b72:	2240      	movs	r2, #64	@ 0x40
 8000b74:	4082      	lsls	r2, r0
 8000b76:	4313      	orrs	r3, r2
 8000b78:	3401      	adds	r4, #1
 8000b7a:	9304      	str	r3, [sp, #16]
 8000b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b80:	4825      	ldr	r0, [pc, #148]	@ (8000c18 <_svfiprintf_r+0x1ec>)
 8000b82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000b86:	2206      	movs	r2, #6
 8000b88:	f7ff fb22 	bl	80001d0 <memchr>
 8000b8c:	2800      	cmp	r0, #0
 8000b8e:	d036      	beq.n	8000bfe <_svfiprintf_r+0x1d2>
 8000b90:	4b22      	ldr	r3, [pc, #136]	@ (8000c1c <_svfiprintf_r+0x1f0>)
 8000b92:	bb1b      	cbnz	r3, 8000bdc <_svfiprintf_r+0x1b0>
 8000b94:	9b03      	ldr	r3, [sp, #12]
 8000b96:	3307      	adds	r3, #7
 8000b98:	f023 0307 	bic.w	r3, r3, #7
 8000b9c:	3308      	adds	r3, #8
 8000b9e:	9303      	str	r3, [sp, #12]
 8000ba0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000ba2:	4433      	add	r3, r6
 8000ba4:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ba6:	e76a      	b.n	8000a7e <_svfiprintf_r+0x52>
 8000ba8:	fb0c 3202 	mla	r2, ip, r2, r3
 8000bac:	460c      	mov	r4, r1
 8000bae:	2001      	movs	r0, #1
 8000bb0:	e7a8      	b.n	8000b04 <_svfiprintf_r+0xd8>
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	3401      	adds	r4, #1
 8000bb6:	9305      	str	r3, [sp, #20]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	f04f 0c0a 	mov.w	ip, #10
 8000bbe:	4620      	mov	r0, r4
 8000bc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000bc4:	3a30      	subs	r2, #48	@ 0x30
 8000bc6:	2a09      	cmp	r2, #9
 8000bc8:	d903      	bls.n	8000bd2 <_svfiprintf_r+0x1a6>
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d0c6      	beq.n	8000b5c <_svfiprintf_r+0x130>
 8000bce:	9105      	str	r1, [sp, #20]
 8000bd0:	e7c4      	b.n	8000b5c <_svfiprintf_r+0x130>
 8000bd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	2301      	movs	r3, #1
 8000bda:	e7f0      	b.n	8000bbe <_svfiprintf_r+0x192>
 8000bdc:	ab03      	add	r3, sp, #12
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	462a      	mov	r2, r5
 8000be2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c20 <_svfiprintf_r+0x1f4>)
 8000be4:	a904      	add	r1, sp, #16
 8000be6:	4638      	mov	r0, r7
 8000be8:	f3af 8000 	nop.w
 8000bec:	1c42      	adds	r2, r0, #1
 8000bee:	4606      	mov	r6, r0
 8000bf0:	d1d6      	bne.n	8000ba0 <_svfiprintf_r+0x174>
 8000bf2:	89ab      	ldrh	r3, [r5, #12]
 8000bf4:	065b      	lsls	r3, r3, #25
 8000bf6:	f53f af2d 	bmi.w	8000a54 <_svfiprintf_r+0x28>
 8000bfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000bfc:	e72c      	b.n	8000a58 <_svfiprintf_r+0x2c>
 8000bfe:	ab03      	add	r3, sp, #12
 8000c00:	9300      	str	r3, [sp, #0]
 8000c02:	462a      	mov	r2, r5
 8000c04:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <_svfiprintf_r+0x1f4>)
 8000c06:	a904      	add	r1, sp, #16
 8000c08:	4638      	mov	r0, r7
 8000c0a:	f000 f879 	bl	8000d00 <_printf_i>
 8000c0e:	e7ed      	b.n	8000bec <_svfiprintf_r+0x1c0>
 8000c10:	0800103d 	.word	0x0800103d
 8000c14:	08001043 	.word	0x08001043
 8000c18:	08001047 	.word	0x08001047
 8000c1c:	00000000 	.word	0x00000000
 8000c20:	08000975 	.word	0x08000975

08000c24 <_printf_common>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	4616      	mov	r6, r2
 8000c2a:	4698      	mov	r8, r3
 8000c2c:	688a      	ldr	r2, [r1, #8]
 8000c2e:	690b      	ldr	r3, [r1, #16]
 8000c30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000c34:	4293      	cmp	r3, r2
 8000c36:	bfb8      	it	lt
 8000c38:	4613      	movlt	r3, r2
 8000c3a:	6033      	str	r3, [r6, #0]
 8000c3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000c40:	4607      	mov	r7, r0
 8000c42:	460c      	mov	r4, r1
 8000c44:	b10a      	cbz	r2, 8000c4a <_printf_common+0x26>
 8000c46:	3301      	adds	r3, #1
 8000c48:	6033      	str	r3, [r6, #0]
 8000c4a:	6823      	ldr	r3, [r4, #0]
 8000c4c:	0699      	lsls	r1, r3, #26
 8000c4e:	bf42      	ittt	mi
 8000c50:	6833      	ldrmi	r3, [r6, #0]
 8000c52:	3302      	addmi	r3, #2
 8000c54:	6033      	strmi	r3, [r6, #0]
 8000c56:	6825      	ldr	r5, [r4, #0]
 8000c58:	f015 0506 	ands.w	r5, r5, #6
 8000c5c:	d106      	bne.n	8000c6c <_printf_common+0x48>
 8000c5e:	f104 0a19 	add.w	sl, r4, #25
 8000c62:	68e3      	ldr	r3, [r4, #12]
 8000c64:	6832      	ldr	r2, [r6, #0]
 8000c66:	1a9b      	subs	r3, r3, r2
 8000c68:	42ab      	cmp	r3, r5
 8000c6a:	dc26      	bgt.n	8000cba <_printf_common+0x96>
 8000c6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000c70:	6822      	ldr	r2, [r4, #0]
 8000c72:	3b00      	subs	r3, #0
 8000c74:	bf18      	it	ne
 8000c76:	2301      	movne	r3, #1
 8000c78:	0692      	lsls	r2, r2, #26
 8000c7a:	d42b      	bmi.n	8000cd4 <_printf_common+0xb0>
 8000c7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000c80:	4641      	mov	r1, r8
 8000c82:	4638      	mov	r0, r7
 8000c84:	47c8      	blx	r9
 8000c86:	3001      	adds	r0, #1
 8000c88:	d01e      	beq.n	8000cc8 <_printf_common+0xa4>
 8000c8a:	6823      	ldr	r3, [r4, #0]
 8000c8c:	6922      	ldr	r2, [r4, #16]
 8000c8e:	f003 0306 	and.w	r3, r3, #6
 8000c92:	2b04      	cmp	r3, #4
 8000c94:	bf02      	ittt	eq
 8000c96:	68e5      	ldreq	r5, [r4, #12]
 8000c98:	6833      	ldreq	r3, [r6, #0]
 8000c9a:	1aed      	subeq	r5, r5, r3
 8000c9c:	68a3      	ldr	r3, [r4, #8]
 8000c9e:	bf0c      	ite	eq
 8000ca0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ca4:	2500      	movne	r5, #0
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	bfc4      	itt	gt
 8000caa:	1a9b      	subgt	r3, r3, r2
 8000cac:	18ed      	addgt	r5, r5, r3
 8000cae:	2600      	movs	r6, #0
 8000cb0:	341a      	adds	r4, #26
 8000cb2:	42b5      	cmp	r5, r6
 8000cb4:	d11a      	bne.n	8000cec <_printf_common+0xc8>
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	e008      	b.n	8000ccc <_printf_common+0xa8>
 8000cba:	2301      	movs	r3, #1
 8000cbc:	4652      	mov	r2, sl
 8000cbe:	4641      	mov	r1, r8
 8000cc0:	4638      	mov	r0, r7
 8000cc2:	47c8      	blx	r9
 8000cc4:	3001      	adds	r0, #1
 8000cc6:	d103      	bne.n	8000cd0 <_printf_common+0xac>
 8000cc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd0:	3501      	adds	r5, #1
 8000cd2:	e7c6      	b.n	8000c62 <_printf_common+0x3e>
 8000cd4:	18e1      	adds	r1, r4, r3
 8000cd6:	1c5a      	adds	r2, r3, #1
 8000cd8:	2030      	movs	r0, #48	@ 0x30
 8000cda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000cde:	4422      	add	r2, r4
 8000ce0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000ce4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000ce8:	3302      	adds	r3, #2
 8000cea:	e7c7      	b.n	8000c7c <_printf_common+0x58>
 8000cec:	2301      	movs	r3, #1
 8000cee:	4622      	mov	r2, r4
 8000cf0:	4641      	mov	r1, r8
 8000cf2:	4638      	mov	r0, r7
 8000cf4:	47c8      	blx	r9
 8000cf6:	3001      	adds	r0, #1
 8000cf8:	d0e6      	beq.n	8000cc8 <_printf_common+0xa4>
 8000cfa:	3601      	adds	r6, #1
 8000cfc:	e7d9      	b.n	8000cb2 <_printf_common+0x8e>
	...

08000d00 <_printf_i>:
 8000d00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d04:	7e0f      	ldrb	r7, [r1, #24]
 8000d06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000d08:	2f78      	cmp	r7, #120	@ 0x78
 8000d0a:	4691      	mov	r9, r2
 8000d0c:	4680      	mov	r8, r0
 8000d0e:	460c      	mov	r4, r1
 8000d10:	469a      	mov	sl, r3
 8000d12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000d16:	d807      	bhi.n	8000d28 <_printf_i+0x28>
 8000d18:	2f62      	cmp	r7, #98	@ 0x62
 8000d1a:	d80a      	bhi.n	8000d32 <_printf_i+0x32>
 8000d1c:	2f00      	cmp	r7, #0
 8000d1e:	f000 80d2 	beq.w	8000ec6 <_printf_i+0x1c6>
 8000d22:	2f58      	cmp	r7, #88	@ 0x58
 8000d24:	f000 80b9 	beq.w	8000e9a <_printf_i+0x19a>
 8000d28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000d2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000d30:	e03a      	b.n	8000da8 <_printf_i+0xa8>
 8000d32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000d36:	2b15      	cmp	r3, #21
 8000d38:	d8f6      	bhi.n	8000d28 <_printf_i+0x28>
 8000d3a:	a101      	add	r1, pc, #4	@ (adr r1, 8000d40 <_printf_i+0x40>)
 8000d3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000d40:	08000d99 	.word	0x08000d99
 8000d44:	08000dad 	.word	0x08000dad
 8000d48:	08000d29 	.word	0x08000d29
 8000d4c:	08000d29 	.word	0x08000d29
 8000d50:	08000d29 	.word	0x08000d29
 8000d54:	08000d29 	.word	0x08000d29
 8000d58:	08000dad 	.word	0x08000dad
 8000d5c:	08000d29 	.word	0x08000d29
 8000d60:	08000d29 	.word	0x08000d29
 8000d64:	08000d29 	.word	0x08000d29
 8000d68:	08000d29 	.word	0x08000d29
 8000d6c:	08000ead 	.word	0x08000ead
 8000d70:	08000dd7 	.word	0x08000dd7
 8000d74:	08000e67 	.word	0x08000e67
 8000d78:	08000d29 	.word	0x08000d29
 8000d7c:	08000d29 	.word	0x08000d29
 8000d80:	08000ecf 	.word	0x08000ecf
 8000d84:	08000d29 	.word	0x08000d29
 8000d88:	08000dd7 	.word	0x08000dd7
 8000d8c:	08000d29 	.word	0x08000d29
 8000d90:	08000d29 	.word	0x08000d29
 8000d94:	08000e6f 	.word	0x08000e6f
 8000d98:	6833      	ldr	r3, [r6, #0]
 8000d9a:	1d1a      	adds	r2, r3, #4
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	6032      	str	r2, [r6, #0]
 8000da0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000da4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000da8:	2301      	movs	r3, #1
 8000daa:	e09d      	b.n	8000ee8 <_printf_i+0x1e8>
 8000dac:	6833      	ldr	r3, [r6, #0]
 8000dae:	6820      	ldr	r0, [r4, #0]
 8000db0:	1d19      	adds	r1, r3, #4
 8000db2:	6031      	str	r1, [r6, #0]
 8000db4:	0606      	lsls	r6, r0, #24
 8000db6:	d501      	bpl.n	8000dbc <_printf_i+0xbc>
 8000db8:	681d      	ldr	r5, [r3, #0]
 8000dba:	e003      	b.n	8000dc4 <_printf_i+0xc4>
 8000dbc:	0645      	lsls	r5, r0, #25
 8000dbe:	d5fb      	bpl.n	8000db8 <_printf_i+0xb8>
 8000dc0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000dc4:	2d00      	cmp	r5, #0
 8000dc6:	da03      	bge.n	8000dd0 <_printf_i+0xd0>
 8000dc8:	232d      	movs	r3, #45	@ 0x2d
 8000dca:	426d      	negs	r5, r5
 8000dcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000dd0:	4859      	ldr	r0, [pc, #356]	@ (8000f38 <_printf_i+0x238>)
 8000dd2:	230a      	movs	r3, #10
 8000dd4:	e011      	b.n	8000dfa <_printf_i+0xfa>
 8000dd6:	6821      	ldr	r1, [r4, #0]
 8000dd8:	6833      	ldr	r3, [r6, #0]
 8000dda:	0608      	lsls	r0, r1, #24
 8000ddc:	f853 5b04 	ldr.w	r5, [r3], #4
 8000de0:	d402      	bmi.n	8000de8 <_printf_i+0xe8>
 8000de2:	0649      	lsls	r1, r1, #25
 8000de4:	bf48      	it	mi
 8000de6:	b2ad      	uxthmi	r5, r5
 8000de8:	2f6f      	cmp	r7, #111	@ 0x6f
 8000dea:	4853      	ldr	r0, [pc, #332]	@ (8000f38 <_printf_i+0x238>)
 8000dec:	6033      	str	r3, [r6, #0]
 8000dee:	bf14      	ite	ne
 8000df0:	230a      	movne	r3, #10
 8000df2:	2308      	moveq	r3, #8
 8000df4:	2100      	movs	r1, #0
 8000df6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000dfa:	6866      	ldr	r6, [r4, #4]
 8000dfc:	60a6      	str	r6, [r4, #8]
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	bfa2      	ittt	ge
 8000e02:	6821      	ldrge	r1, [r4, #0]
 8000e04:	f021 0104 	bicge.w	r1, r1, #4
 8000e08:	6021      	strge	r1, [r4, #0]
 8000e0a:	b90d      	cbnz	r5, 8000e10 <_printf_i+0x110>
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d04b      	beq.n	8000ea8 <_printf_i+0x1a8>
 8000e10:	4616      	mov	r6, r2
 8000e12:	fbb5 f1f3 	udiv	r1, r5, r3
 8000e16:	fb03 5711 	mls	r7, r3, r1, r5
 8000e1a:	5dc7      	ldrb	r7, [r0, r7]
 8000e1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000e20:	462f      	mov	r7, r5
 8000e22:	42bb      	cmp	r3, r7
 8000e24:	460d      	mov	r5, r1
 8000e26:	d9f4      	bls.n	8000e12 <_printf_i+0x112>
 8000e28:	2b08      	cmp	r3, #8
 8000e2a:	d10b      	bne.n	8000e44 <_printf_i+0x144>
 8000e2c:	6823      	ldr	r3, [r4, #0]
 8000e2e:	07df      	lsls	r7, r3, #31
 8000e30:	d508      	bpl.n	8000e44 <_printf_i+0x144>
 8000e32:	6923      	ldr	r3, [r4, #16]
 8000e34:	6861      	ldr	r1, [r4, #4]
 8000e36:	4299      	cmp	r1, r3
 8000e38:	bfde      	ittt	le
 8000e3a:	2330      	movle	r3, #48	@ 0x30
 8000e3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000e40:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000e44:	1b92      	subs	r2, r2, r6
 8000e46:	6122      	str	r2, [r4, #16]
 8000e48:	f8cd a000 	str.w	sl, [sp]
 8000e4c:	464b      	mov	r3, r9
 8000e4e:	aa03      	add	r2, sp, #12
 8000e50:	4621      	mov	r1, r4
 8000e52:	4640      	mov	r0, r8
 8000e54:	f7ff fee6 	bl	8000c24 <_printf_common>
 8000e58:	3001      	adds	r0, #1
 8000e5a:	d14a      	bne.n	8000ef2 <_printf_i+0x1f2>
 8000e5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e60:	b004      	add	sp, #16
 8000e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e66:	6823      	ldr	r3, [r4, #0]
 8000e68:	f043 0320 	orr.w	r3, r3, #32
 8000e6c:	6023      	str	r3, [r4, #0]
 8000e6e:	4833      	ldr	r0, [pc, #204]	@ (8000f3c <_printf_i+0x23c>)
 8000e70:	2778      	movs	r7, #120	@ 0x78
 8000e72:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000e76:	6823      	ldr	r3, [r4, #0]
 8000e78:	6831      	ldr	r1, [r6, #0]
 8000e7a:	061f      	lsls	r7, r3, #24
 8000e7c:	f851 5b04 	ldr.w	r5, [r1], #4
 8000e80:	d402      	bmi.n	8000e88 <_printf_i+0x188>
 8000e82:	065f      	lsls	r7, r3, #25
 8000e84:	bf48      	it	mi
 8000e86:	b2ad      	uxthmi	r5, r5
 8000e88:	6031      	str	r1, [r6, #0]
 8000e8a:	07d9      	lsls	r1, r3, #31
 8000e8c:	bf44      	itt	mi
 8000e8e:	f043 0320 	orrmi.w	r3, r3, #32
 8000e92:	6023      	strmi	r3, [r4, #0]
 8000e94:	b11d      	cbz	r5, 8000e9e <_printf_i+0x19e>
 8000e96:	2310      	movs	r3, #16
 8000e98:	e7ac      	b.n	8000df4 <_printf_i+0xf4>
 8000e9a:	4827      	ldr	r0, [pc, #156]	@ (8000f38 <_printf_i+0x238>)
 8000e9c:	e7e9      	b.n	8000e72 <_printf_i+0x172>
 8000e9e:	6823      	ldr	r3, [r4, #0]
 8000ea0:	f023 0320 	bic.w	r3, r3, #32
 8000ea4:	6023      	str	r3, [r4, #0]
 8000ea6:	e7f6      	b.n	8000e96 <_printf_i+0x196>
 8000ea8:	4616      	mov	r6, r2
 8000eaa:	e7bd      	b.n	8000e28 <_printf_i+0x128>
 8000eac:	6833      	ldr	r3, [r6, #0]
 8000eae:	6825      	ldr	r5, [r4, #0]
 8000eb0:	6961      	ldr	r1, [r4, #20]
 8000eb2:	1d18      	adds	r0, r3, #4
 8000eb4:	6030      	str	r0, [r6, #0]
 8000eb6:	062e      	lsls	r6, r5, #24
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	d501      	bpl.n	8000ec0 <_printf_i+0x1c0>
 8000ebc:	6019      	str	r1, [r3, #0]
 8000ebe:	e002      	b.n	8000ec6 <_printf_i+0x1c6>
 8000ec0:	0668      	lsls	r0, r5, #25
 8000ec2:	d5fb      	bpl.n	8000ebc <_printf_i+0x1bc>
 8000ec4:	8019      	strh	r1, [r3, #0]
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	6123      	str	r3, [r4, #16]
 8000eca:	4616      	mov	r6, r2
 8000ecc:	e7bc      	b.n	8000e48 <_printf_i+0x148>
 8000ece:	6833      	ldr	r3, [r6, #0]
 8000ed0:	1d1a      	adds	r2, r3, #4
 8000ed2:	6032      	str	r2, [r6, #0]
 8000ed4:	681e      	ldr	r6, [r3, #0]
 8000ed6:	6862      	ldr	r2, [r4, #4]
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4630      	mov	r0, r6
 8000edc:	f7ff f978 	bl	80001d0 <memchr>
 8000ee0:	b108      	cbz	r0, 8000ee6 <_printf_i+0x1e6>
 8000ee2:	1b80      	subs	r0, r0, r6
 8000ee4:	6060      	str	r0, [r4, #4]
 8000ee6:	6863      	ldr	r3, [r4, #4]
 8000ee8:	6123      	str	r3, [r4, #16]
 8000eea:	2300      	movs	r3, #0
 8000eec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000ef0:	e7aa      	b.n	8000e48 <_printf_i+0x148>
 8000ef2:	6923      	ldr	r3, [r4, #16]
 8000ef4:	4632      	mov	r2, r6
 8000ef6:	4649      	mov	r1, r9
 8000ef8:	4640      	mov	r0, r8
 8000efa:	47d0      	blx	sl
 8000efc:	3001      	adds	r0, #1
 8000efe:	d0ad      	beq.n	8000e5c <_printf_i+0x15c>
 8000f00:	6823      	ldr	r3, [r4, #0]
 8000f02:	079b      	lsls	r3, r3, #30
 8000f04:	d413      	bmi.n	8000f2e <_printf_i+0x22e>
 8000f06:	68e0      	ldr	r0, [r4, #12]
 8000f08:	9b03      	ldr	r3, [sp, #12]
 8000f0a:	4298      	cmp	r0, r3
 8000f0c:	bfb8      	it	lt
 8000f0e:	4618      	movlt	r0, r3
 8000f10:	e7a6      	b.n	8000e60 <_printf_i+0x160>
 8000f12:	2301      	movs	r3, #1
 8000f14:	4632      	mov	r2, r6
 8000f16:	4649      	mov	r1, r9
 8000f18:	4640      	mov	r0, r8
 8000f1a:	47d0      	blx	sl
 8000f1c:	3001      	adds	r0, #1
 8000f1e:	d09d      	beq.n	8000e5c <_printf_i+0x15c>
 8000f20:	3501      	adds	r5, #1
 8000f22:	68e3      	ldr	r3, [r4, #12]
 8000f24:	9903      	ldr	r1, [sp, #12]
 8000f26:	1a5b      	subs	r3, r3, r1
 8000f28:	42ab      	cmp	r3, r5
 8000f2a:	dcf2      	bgt.n	8000f12 <_printf_i+0x212>
 8000f2c:	e7eb      	b.n	8000f06 <_printf_i+0x206>
 8000f2e:	2500      	movs	r5, #0
 8000f30:	f104 0619 	add.w	r6, r4, #25
 8000f34:	e7f5      	b.n	8000f22 <_printf_i+0x222>
 8000f36:	bf00      	nop
 8000f38:	0800104e 	.word	0x0800104e
 8000f3c:	0800105f 	.word	0x0800105f

08000f40 <memmove>:
 8000f40:	4288      	cmp	r0, r1
 8000f42:	b510      	push	{r4, lr}
 8000f44:	eb01 0402 	add.w	r4, r1, r2
 8000f48:	d902      	bls.n	8000f50 <memmove+0x10>
 8000f4a:	4284      	cmp	r4, r0
 8000f4c:	4623      	mov	r3, r4
 8000f4e:	d807      	bhi.n	8000f60 <memmove+0x20>
 8000f50:	1e43      	subs	r3, r0, #1
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	d008      	beq.n	8000f68 <memmove+0x28>
 8000f56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000f5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000f5e:	e7f8      	b.n	8000f52 <memmove+0x12>
 8000f60:	4402      	add	r2, r0
 8000f62:	4601      	mov	r1, r0
 8000f64:	428a      	cmp	r2, r1
 8000f66:	d100      	bne.n	8000f6a <memmove+0x2a>
 8000f68:	bd10      	pop	{r4, pc}
 8000f6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000f6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000f72:	e7f7      	b.n	8000f64 <memmove+0x24>

08000f74 <_sbrk_r>:
 8000f74:	b538      	push	{r3, r4, r5, lr}
 8000f76:	4d06      	ldr	r5, [pc, #24]	@ (8000f90 <_sbrk_r+0x1c>)
 8000f78:	2300      	movs	r3, #0
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	4608      	mov	r0, r1
 8000f7e:	602b      	str	r3, [r5, #0]
 8000f80:	f7ff faf8 	bl	8000574 <_sbrk>
 8000f84:	1c43      	adds	r3, r0, #1
 8000f86:	d102      	bne.n	8000f8e <_sbrk_r+0x1a>
 8000f88:	682b      	ldr	r3, [r5, #0]
 8000f8a:	b103      	cbz	r3, 8000f8e <_sbrk_r+0x1a>
 8000f8c:	6023      	str	r3, [r4, #0]
 8000f8e:	bd38      	pop	{r3, r4, r5, pc}
 8000f90:	200001b0 	.word	0x200001b0

08000f94 <memcpy>:
 8000f94:	440a      	add	r2, r1
 8000f96:	4291      	cmp	r1, r2
 8000f98:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8000f9c:	d100      	bne.n	8000fa0 <memcpy+0xc>
 8000f9e:	4770      	bx	lr
 8000fa0:	b510      	push	{r4, lr}
 8000fa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000fa6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000faa:	4291      	cmp	r1, r2
 8000fac:	d1f9      	bne.n	8000fa2 <memcpy+0xe>
 8000fae:	bd10      	pop	{r4, pc}

08000fb0 <_realloc_r>:
 8000fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fb4:	4680      	mov	r8, r0
 8000fb6:	4615      	mov	r5, r2
 8000fb8:	460c      	mov	r4, r1
 8000fba:	b921      	cbnz	r1, 8000fc6 <_realloc_r+0x16>
 8000fbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000fc0:	4611      	mov	r1, r2
 8000fc2:	f7ff bc4b 	b.w	800085c <_malloc_r>
 8000fc6:	b92a      	cbnz	r2, 8000fd4 <_realloc_r+0x24>
 8000fc8:	f7ff fbdc 	bl	8000784 <_free_r>
 8000fcc:	2400      	movs	r4, #0
 8000fce:	4620      	mov	r0, r4
 8000fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000fd4:	f000 f81a 	bl	800100c <_malloc_usable_size_r>
 8000fd8:	4285      	cmp	r5, r0
 8000fda:	4606      	mov	r6, r0
 8000fdc:	d802      	bhi.n	8000fe4 <_realloc_r+0x34>
 8000fde:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8000fe2:	d8f4      	bhi.n	8000fce <_realloc_r+0x1e>
 8000fe4:	4629      	mov	r1, r5
 8000fe6:	4640      	mov	r0, r8
 8000fe8:	f7ff fc38 	bl	800085c <_malloc_r>
 8000fec:	4607      	mov	r7, r0
 8000fee:	2800      	cmp	r0, #0
 8000ff0:	d0ec      	beq.n	8000fcc <_realloc_r+0x1c>
 8000ff2:	42b5      	cmp	r5, r6
 8000ff4:	462a      	mov	r2, r5
 8000ff6:	4621      	mov	r1, r4
 8000ff8:	bf28      	it	cs
 8000ffa:	4632      	movcs	r2, r6
 8000ffc:	f7ff ffca 	bl	8000f94 <memcpy>
 8001000:	4621      	mov	r1, r4
 8001002:	4640      	mov	r0, r8
 8001004:	f7ff fbbe 	bl	8000784 <_free_r>
 8001008:	463c      	mov	r4, r7
 800100a:	e7e0      	b.n	8000fce <_realloc_r+0x1e>

0800100c <_malloc_usable_size_r>:
 800100c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001010:	1f18      	subs	r0, r3, #4
 8001012:	2b00      	cmp	r3, #0
 8001014:	bfbc      	itt	lt
 8001016:	580b      	ldrlt	r3, [r1, r0]
 8001018:	18c0      	addlt	r0, r0, r3
 800101a:	4770      	bx	lr

0800101c <_init>:
 800101c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800101e:	bf00      	nop
 8001020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001022:	bc08      	pop	{r3}
 8001024:	469e      	mov	lr, r3
 8001026:	4770      	bx	lr

08001028 <_fini>:
 8001028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800102a:	bf00      	nop
 800102c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800102e:	bc08      	pop	{r3}
 8001030:	469e      	mov	lr, r3
 8001032:	4770      	bx	lr
