
Day7_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000071c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  080008a4  080008a4  000018a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080009d4  080009d4  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  080009d4  080009d4  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080009d4  080009d4  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009d4  080009d4  000019d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080009d8  080009d8  000019d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080009dc  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002004  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   000019ba  00000000  00000000  0000202e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000706  00000000  00000000  000039e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000140  00000000  00000000  000040f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000d7  00000000  00000000  00004230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000183ae  00000000  00000000  00004307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001a9f  00000000  00000000  0001c6b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bf67  00000000  00000000  0001e154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000aa0bb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000350  00000000  00000000  000aa100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000aa450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005c  00000000  00000000  000aa46f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800088c 	.word	0x0800088c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	0800088c 	.word	0x0800088c

080001c8 <LedInit>:
 */

#include "led.h"
#include "stm32f4xx.h"

void LedInit(uint32_t pin) {
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	// enable gpio clock (in AHB1ENR)
	RCC->AHB1ENR |= BV(LED_GPIO_EN);
 80001d0:	4b28      	ldr	r3, [pc, #160]	@ (8000274 <LedInit+0xac>)
 80001d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001d4:	4a27      	ldr	r2, [pc, #156]	@ (8000274 <LedInit+0xac>)
 80001d6:	f043 0308 	orr.w	r3, r3, #8
 80001da:	6313      	str	r3, [r2, #48]	@ 0x30
	// set gpio pin as output (in MODER)
	LED_GPIO->MODER &= ~BV(pin * 2 + 1);
 80001dc:	4b26      	ldr	r3, [pc, #152]	@ (8000278 <LedInit+0xb0>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	687a      	ldr	r2, [r7, #4]
 80001e2:	0052      	lsls	r2, r2, #1
 80001e4:	3201      	adds	r2, #1
 80001e6:	2101      	movs	r1, #1
 80001e8:	fa01 f202 	lsl.w	r2, r1, r2
 80001ec:	43d2      	mvns	r2, r2
 80001ee:	4611      	mov	r1, r2
 80001f0:	4a21      	ldr	r2, [pc, #132]	@ (8000278 <LedInit+0xb0>)
 80001f2:	400b      	ands	r3, r1
 80001f4:	6013      	str	r3, [r2, #0]
	LED_GPIO->MODER |= BV(pin * 2);
 80001f6:	4b20      	ldr	r3, [pc, #128]	@ (8000278 <LedInit+0xb0>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	687a      	ldr	r2, [r7, #4]
 80001fc:	0052      	lsls	r2, r2, #1
 80001fe:	2101      	movs	r1, #1
 8000200:	fa01 f202 	lsl.w	r2, r1, r2
 8000204:	4611      	mov	r1, r2
 8000206:	4a1c      	ldr	r2, [pc, #112]	@ (8000278 <LedInit+0xb0>)
 8000208:	430b      	orrs	r3, r1
 800020a:	6013      	str	r3, [r2, #0]
	// set gpio pin speed to low (in OSPEEDR)
	LED_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 800020c:	4b1a      	ldr	r3, [pc, #104]	@ (8000278 <LedInit+0xb0>)
 800020e:	689b      	ldr	r3, [r3, #8]
 8000210:	687a      	ldr	r2, [r7, #4]
 8000212:	0052      	lsls	r2, r2, #1
 8000214:	3201      	adds	r2, #1
 8000216:	2101      	movs	r1, #1
 8000218:	4091      	lsls	r1, r2
 800021a:	687a      	ldr	r2, [r7, #4]
 800021c:	0052      	lsls	r2, r2, #1
 800021e:	2001      	movs	r0, #1
 8000220:	fa00 f202 	lsl.w	r2, r0, r2
 8000224:	430a      	orrs	r2, r1
 8000226:	43d2      	mvns	r2, r2
 8000228:	4611      	mov	r1, r2
 800022a:	4a13      	ldr	r2, [pc, #76]	@ (8000278 <LedInit+0xb0>)
 800022c:	400b      	ands	r3, r1
 800022e:	6093      	str	r3, [r2, #8]
	// set gpio pin no pull up, no pull down (in PUPDR)
	LED_GPIO->PUPDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 8000230:	4b11      	ldr	r3, [pc, #68]	@ (8000278 <LedInit+0xb0>)
 8000232:	68db      	ldr	r3, [r3, #12]
 8000234:	687a      	ldr	r2, [r7, #4]
 8000236:	0052      	lsls	r2, r2, #1
 8000238:	3201      	adds	r2, #1
 800023a:	2101      	movs	r1, #1
 800023c:	4091      	lsls	r1, r2
 800023e:	687a      	ldr	r2, [r7, #4]
 8000240:	0052      	lsls	r2, r2, #1
 8000242:	2001      	movs	r0, #1
 8000244:	fa00 f202 	lsl.w	r2, r0, r2
 8000248:	430a      	orrs	r2, r1
 800024a:	43d2      	mvns	r2, r2
 800024c:	4611      	mov	r1, r2
 800024e:	4a0a      	ldr	r2, [pc, #40]	@ (8000278 <LedInit+0xb0>)
 8000250:	400b      	ands	r3, r1
 8000252:	60d3      	str	r3, [r2, #12]
	// set gpio pin type as push-pull (in OTYPER)
	LED_GPIO->OTYPER &= ~BV(pin);
 8000254:	4b08      	ldr	r3, [pc, #32]	@ (8000278 <LedInit+0xb0>)
 8000256:	685b      	ldr	r3, [r3, #4]
 8000258:	2101      	movs	r1, #1
 800025a:	687a      	ldr	r2, [r7, #4]
 800025c:	fa01 f202 	lsl.w	r2, r1, r2
 8000260:	43d2      	mvns	r2, r2
 8000262:	4611      	mov	r1, r2
 8000264:	4a04      	ldr	r2, [pc, #16]	@ (8000278 <LedInit+0xb0>)
 8000266:	400b      	ands	r3, r1
 8000268:	6053      	str	r3, [r2, #4]
}
 800026a:	bf00      	nop
 800026c:	370c      	adds	r7, #12
 800026e:	46bd      	mov	sp, r7
 8000270:	bc80      	pop	{r7}
 8000272:	4770      	bx	lr
 8000274:	40023800 	.word	0x40023800
 8000278:	40020c00 	.word	0x40020c00

0800027c <LedOn>:

void LedOn(uint32_t pin) {
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
	// set led pin (in ODR)
	LED_GPIO->ODR |= BV(pin);
 8000284:	4b07      	ldr	r3, [pc, #28]	@ (80002a4 <LedOn+0x28>)
 8000286:	695b      	ldr	r3, [r3, #20]
 8000288:	2101      	movs	r1, #1
 800028a:	687a      	ldr	r2, [r7, #4]
 800028c:	fa01 f202 	lsl.w	r2, r1, r2
 8000290:	4611      	mov	r1, r2
 8000292:	4a04      	ldr	r2, [pc, #16]	@ (80002a4 <LedOn+0x28>)
 8000294:	430b      	orrs	r3, r1
 8000296:	6153      	str	r3, [r2, #20]
}
 8000298:	bf00      	nop
 800029a:	370c      	adds	r7, #12
 800029c:	46bd      	mov	sp, r7
 800029e:	bc80      	pop	{r7}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	40020c00 	.word	0x40020c00

080002a8 <LedOff>:

void LedOff(uint32_t pin) {
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
	// clear led pin (in ODR)
	LED_GPIO->ODR &= ~BV(pin);
 80002b0:	4b07      	ldr	r3, [pc, #28]	@ (80002d0 <LedOff+0x28>)
 80002b2:	695b      	ldr	r3, [r3, #20]
 80002b4:	2101      	movs	r1, #1
 80002b6:	687a      	ldr	r2, [r7, #4]
 80002b8:	fa01 f202 	lsl.w	r2, r1, r2
 80002bc:	43d2      	mvns	r2, r2
 80002be:	4611      	mov	r1, r2
 80002c0:	4a03      	ldr	r2, [pc, #12]	@ (80002d0 <LedOff+0x28>)
 80002c2:	400b      	ands	r3, r1
 80002c4:	6153      	str	r3, [r2, #20]
}
 80002c6:	bf00      	nop
 80002c8:	370c      	adds	r7, #12
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bc80      	pop	{r7}
 80002ce:	4770      	bx	lr
 80002d0:	40020c00 	.word	0x40020c00

080002d4 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 80002d4:	b480      	push	{r7}
 80002d6:	b085      	sub	sp, #20
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80002dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000318 <DelayMs+0x44>)
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 80002e2:	4b0e      	ldr	r3, [pc, #56]	@ (800031c <DelayMs+0x48>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000320 <DelayMs+0x4c>)
 80002e8:	fba2 2303 	umull	r2, r3, r2, r3
 80002ec:	099b      	lsrs	r3, r3, #6
 80002ee:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	68ba      	ldr	r2, [r7, #8]
 80002f4:	fb02 f303 	mul.w	r3, r2, r3
 80002f8:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80002fa:	bf00      	nop
 80002fc:	4b06      	ldr	r3, [pc, #24]	@ (8000318 <DelayMs+0x44>)
 80002fe:	685a      	ldr	r2, [r3, #4]
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	1ad2      	subs	r2, r2, r3
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	429a      	cmp	r2, r3
 8000308:	d3f8      	bcc.n	80002fc <DelayMs+0x28>
}
 800030a:	bf00      	nop
 800030c:	bf00      	nop
 800030e:	3714      	adds	r7, #20
 8000310:	46bd      	mov	sp, r7
 8000312:	bc80      	pop	{r7}
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	e0001000 	.word	0xe0001000
 800031c:	20000000 	.word	0x20000000
 8000320:	10624dd3 	.word	0x10624dd3

08000324 <main>:
#endif

extern int count;

int main(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b08e      	sub	sp, #56	@ 0x38
 8000328:	af00      	add	r7, sp, #0
	char str[50];
	SystemInit();
 800032a:	f000 f94f 	bl	80005cc <SystemInit>
	LedInit(LED_RED);
 800032e:	200e      	movs	r0, #14
 8000330:	f7ff ff4a 	bl	80001c8 <LedInit>
	LedInit(LED_ORANGE);
 8000334:	200d      	movs	r0, #13
 8000336:	f7ff ff47 	bl	80001c8 <LedInit>
	LedInit(LED_GREEN);
 800033a:	200c      	movs	r0, #12
 800033c:	f7ff ff44 	bl	80001c8 <LedInit>
	LedInit(LED_BLUE);
 8000340:	200f      	movs	r0, #15
 8000342:	f7ff ff41 	bl	80001c8 <LedInit>
	UartInit(BAUD_9600);
 8000346:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 800034a:	f000 f975 	bl	8000638 <UartInit>
	SwitchInit(SWITCH);
 800034e:	2000      	movs	r0, #0
 8000350:	f000 f8c6 	bl	80004e0 <SwitchInit>
	UartPuts("--------LED_CONTROL-------\r\n");		DelayMs(30);
 8000354:	4843      	ldr	r0, [pc, #268]	@ (8000464 <main+0x140>)
 8000356:	f000 fa09 	bl	800076c <UartPuts>
 800035a:	201e      	movs	r0, #30
 800035c:	f7ff ffba 	bl	80002d4 <DelayMs>
	UartPuts("1. RED LED ON\r\n");					DelayMs(30);
 8000360:	4841      	ldr	r0, [pc, #260]	@ (8000468 <main+0x144>)
 8000362:	f000 fa03 	bl	800076c <UartPuts>
 8000366:	201e      	movs	r0, #30
 8000368:	f7ff ffb4 	bl	80002d4 <DelayMs>
	UartPuts("2. RED LED OFF\r\n");					DelayMs(30);
 800036c:	483f      	ldr	r0, [pc, #252]	@ (800046c <main+0x148>)
 800036e:	f000 f9fd 	bl	800076c <UartPuts>
 8000372:	201e      	movs	r0, #30
 8000374:	f7ff ffae 	bl	80002d4 <DelayMs>
	UartPuts("3. ORANGE LED ON\r\n");				DelayMs(30);
 8000378:	483d      	ldr	r0, [pc, #244]	@ (8000470 <main+0x14c>)
 800037a:	f000 f9f7 	bl	800076c <UartPuts>
 800037e:	201e      	movs	r0, #30
 8000380:	f7ff ffa8 	bl	80002d4 <DelayMs>
	UartPuts("4. ORANGE LED OFF\r\n");				DelayMs(30);
 8000384:	483b      	ldr	r0, [pc, #236]	@ (8000474 <main+0x150>)
 8000386:	f000 f9f1 	bl	800076c <UartPuts>
 800038a:	201e      	movs	r0, #30
 800038c:	f7ff ffa2 	bl	80002d4 <DelayMs>
	UartPuts("5. GREEN LED ON\r\n");				DelayMs(30);
 8000390:	4839      	ldr	r0, [pc, #228]	@ (8000478 <main+0x154>)
 8000392:	f000 f9eb 	bl	800076c <UartPuts>
 8000396:	201e      	movs	r0, #30
 8000398:	f7ff ff9c 	bl	80002d4 <DelayMs>
	UartPuts("6. GREEN LED OFF\r\n");				DelayMs(30);
 800039c:	4837      	ldr	r0, [pc, #220]	@ (800047c <main+0x158>)
 800039e:	f000 f9e5 	bl	800076c <UartPuts>
 80003a2:	201e      	movs	r0, #30
 80003a4:	f7ff ff96 	bl	80002d4 <DelayMs>
	UartPuts("7. BLUE LED ON\r\n");					DelayMs(30);
 80003a8:	4835      	ldr	r0, [pc, #212]	@ (8000480 <main+0x15c>)
 80003aa:	f000 f9df 	bl	800076c <UartPuts>
 80003ae:	201e      	movs	r0, #30
 80003b0:	f7ff ff90 	bl	80002d4 <DelayMs>
	UartPuts("8. BLUE LED OFF\r\n");				DelayMs(30);
 80003b4:	4833      	ldr	r0, [pc, #204]	@ (8000484 <main+0x160>)
 80003b6:	f000 f9d9 	bl	800076c <UartPuts>
 80003ba:	201e      	movs	r0, #30
 80003bc:	f7ff ff8a 	bl	80002d4 <DelayMs>

	while(1)
	{
		UartGets(str);
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	4618      	mov	r0, r3
 80003c4:	f000 f9ee 	bl	80007a4 <UartGets>
		if(str[0] == '1')
 80003c8:	793b      	ldrb	r3, [r7, #4]
 80003ca:	2b31      	cmp	r3, #49	@ 0x31
 80003cc:	d106      	bne.n	80003dc <main+0xb8>
		{
			LedOn(LED_RED);
 80003ce:	200e      	movs	r0, #14
 80003d0:	f7ff ff54 	bl	800027c <LedOn>
			UartPuts("LED_Red_ON");
 80003d4:	482c      	ldr	r0, [pc, #176]	@ (8000488 <main+0x164>)
 80003d6:	f000 f9c9 	bl	800076c <UartPuts>
 80003da:	e008      	b.n	80003ee <main+0xca>
		}
		else if(str[0] == '2')
 80003dc:	793b      	ldrb	r3, [r7, #4]
 80003de:	2b32      	cmp	r3, #50	@ 0x32
 80003e0:	d105      	bne.n	80003ee <main+0xca>
		{
			LedOff(LED_RED);
 80003e2:	200e      	movs	r0, #14
 80003e4:	f7ff ff60 	bl	80002a8 <LedOff>
			UartPuts("LED_Red_OFF");
 80003e8:	4828      	ldr	r0, [pc, #160]	@ (800048c <main+0x168>)
 80003ea:	f000 f9bf 	bl	800076c <UartPuts>
		}
		if(str[0] == '3')
 80003ee:	793b      	ldrb	r3, [r7, #4]
 80003f0:	2b33      	cmp	r3, #51	@ 0x33
 80003f2:	d106      	bne.n	8000402 <main+0xde>
		{
			LedOn(LED_ORANGE);
 80003f4:	200d      	movs	r0, #13
 80003f6:	f7ff ff41 	bl	800027c <LedOn>
			UartPuts("LED_Orange_ON");
 80003fa:	4825      	ldr	r0, [pc, #148]	@ (8000490 <main+0x16c>)
 80003fc:	f000 f9b6 	bl	800076c <UartPuts>
 8000400:	e008      	b.n	8000414 <main+0xf0>
		}
		else if(str[0] == '4')
 8000402:	793b      	ldrb	r3, [r7, #4]
 8000404:	2b34      	cmp	r3, #52	@ 0x34
 8000406:	d105      	bne.n	8000414 <main+0xf0>
		{
			LedOff(LED_ORANGE);
 8000408:	200d      	movs	r0, #13
 800040a:	f7ff ff4d 	bl	80002a8 <LedOff>
			UartPuts("LED_Orange_OFF");
 800040e:	4821      	ldr	r0, [pc, #132]	@ (8000494 <main+0x170>)
 8000410:	f000 f9ac 	bl	800076c <UartPuts>
		}
		if(str[0] == '5')
 8000414:	793b      	ldrb	r3, [r7, #4]
 8000416:	2b35      	cmp	r3, #53	@ 0x35
 8000418:	d106      	bne.n	8000428 <main+0x104>
		{
			LedOn(LED_GREEN);
 800041a:	200c      	movs	r0, #12
 800041c:	f7ff ff2e 	bl	800027c <LedOn>
			UartPuts("LED_Green_ON");
 8000420:	481d      	ldr	r0, [pc, #116]	@ (8000498 <main+0x174>)
 8000422:	f000 f9a3 	bl	800076c <UartPuts>
 8000426:	e008      	b.n	800043a <main+0x116>
		}
		else if(str[0] == '6')
 8000428:	793b      	ldrb	r3, [r7, #4]
 800042a:	2b36      	cmp	r3, #54	@ 0x36
 800042c:	d105      	bne.n	800043a <main+0x116>
		{
			LedOff(LED_GREEN);
 800042e:	200c      	movs	r0, #12
 8000430:	f7ff ff3a 	bl	80002a8 <LedOff>
			UartPuts("LED_Green_Off");
 8000434:	4819      	ldr	r0, [pc, #100]	@ (800049c <main+0x178>)
 8000436:	f000 f999 	bl	800076c <UartPuts>
		}
		if(str[0] == '7')
 800043a:	793b      	ldrb	r3, [r7, #4]
 800043c:	2b37      	cmp	r3, #55	@ 0x37
 800043e:	d106      	bne.n	800044e <main+0x12a>
		{
			LedOn(LED_BLUE);
 8000440:	200f      	movs	r0, #15
 8000442:	f7ff ff1b 	bl	800027c <LedOn>
			UartPuts("LED_Blue_ON");
 8000446:	4816      	ldr	r0, [pc, #88]	@ (80004a0 <main+0x17c>)
 8000448:	f000 f990 	bl	800076c <UartPuts>
 800044c:	e7b8      	b.n	80003c0 <main+0x9c>
		}
		else if(str[0] == '8')
 800044e:	793b      	ldrb	r3, [r7, #4]
 8000450:	2b38      	cmp	r3, #56	@ 0x38
 8000452:	d1b5      	bne.n	80003c0 <main+0x9c>
		{
			LedOff(LED_BLUE);
 8000454:	200f      	movs	r0, #15
 8000456:	f7ff ff27 	bl	80002a8 <LedOff>
			UartPuts("LED_Blue_OFF");
 800045a:	4812      	ldr	r0, [pc, #72]	@ (80004a4 <main+0x180>)
 800045c:	f000 f986 	bl	800076c <UartPuts>
		UartGets(str);
 8000460:	e7ae      	b.n	80003c0 <main+0x9c>
 8000462:	bf00      	nop
 8000464:	080008a4 	.word	0x080008a4
 8000468:	080008c4 	.word	0x080008c4
 800046c:	080008d4 	.word	0x080008d4
 8000470:	080008e8 	.word	0x080008e8
 8000474:	080008fc 	.word	0x080008fc
 8000478:	08000910 	.word	0x08000910
 800047c:	08000924 	.word	0x08000924
 8000480:	08000938 	.word	0x08000938
 8000484:	0800094c 	.word	0x0800094c
 8000488:	08000960 	.word	0x08000960
 800048c:	0800096c 	.word	0x0800096c
 8000490:	08000978 	.word	0x08000978
 8000494:	08000988 	.word	0x08000988
 8000498:	08000998 	.word	0x08000998
 800049c:	080009a8 	.word	0x080009a8
 80004a0:	080009b8 	.word	0x080009b8
 80004a4:	080009c4 	.word	0x080009c4

080004a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	4603      	mov	r3, r0
 80004b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	db0b      	blt.n	80004d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004ba:	79fb      	ldrb	r3, [r7, #7]
 80004bc:	f003 021f 	and.w	r2, r3, #31
 80004c0:	4906      	ldr	r1, [pc, #24]	@ (80004dc <__NVIC_EnableIRQ+0x34>)
 80004c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004c6:	095b      	lsrs	r3, r3, #5
 80004c8:	2001      	movs	r0, #1
 80004ca:	fa00 f202 	lsl.w	r2, r0, r2
 80004ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80004d2:	bf00      	nop
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr
 80004dc:	e000e100 	.word	0xe000e100

080004e0 <SwitchInit>:
#include "switch.h"

int count = 0;


void SwitchInit(uint32_t pin) {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
	RCC->AHB1ENR |= BV(SWITCH_GPIO_EN);
 80004e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000594 <SwitchInit+0xb4>)
 80004ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ec:	4a29      	ldr	r2, [pc, #164]	@ (8000594 <SwitchInit+0xb4>)
 80004ee:	f043 0301 	orr.w	r3, r3, #1
 80004f2:	6313      	str	r3, [r2, #48]	@ 0x30
	SWITCH_GPIO->MODER &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 80004f4:	4b28      	ldr	r3, [pc, #160]	@ (8000598 <SwitchInit+0xb8>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	687a      	ldr	r2, [r7, #4]
 80004fa:	0052      	lsls	r2, r2, #1
 80004fc:	3201      	adds	r2, #1
 80004fe:	2101      	movs	r1, #1
 8000500:	4091      	lsls	r1, r2
 8000502:	687a      	ldr	r2, [r7, #4]
 8000504:	0052      	lsls	r2, r2, #1
 8000506:	2001      	movs	r0, #1
 8000508:	fa00 f202 	lsl.w	r2, r0, r2
 800050c:	430a      	orrs	r2, r1
 800050e:	43d2      	mvns	r2, r2
 8000510:	4611      	mov	r1, r2
 8000512:	4a21      	ldr	r2, [pc, #132]	@ (8000598 <SwitchInit+0xb8>)
 8000514:	400b      	ands	r3, r1
 8000516:	6013      	str	r3, [r2, #0]
	SWITCH_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 8000518:	4b1f      	ldr	r3, [pc, #124]	@ (8000598 <SwitchInit+0xb8>)
 800051a:	689b      	ldr	r3, [r3, #8]
 800051c:	687a      	ldr	r2, [r7, #4]
 800051e:	0052      	lsls	r2, r2, #1
 8000520:	3201      	adds	r2, #1
 8000522:	2101      	movs	r1, #1
 8000524:	4091      	lsls	r1, r2
 8000526:	687a      	ldr	r2, [r7, #4]
 8000528:	0052      	lsls	r2, r2, #1
 800052a:	2001      	movs	r0, #1
 800052c:	fa00 f202 	lsl.w	r2, r0, r2
 8000530:	430a      	orrs	r2, r1
 8000532:	43d2      	mvns	r2, r2
 8000534:	4611      	mov	r1, r2
 8000536:	4a18      	ldr	r2, [pc, #96]	@ (8000598 <SwitchInit+0xb8>)
 8000538:	400b      	ands	r3, r1
 800053a:	6093      	str	r3, [r2, #8]
	SWITCH_GPIO->PUPDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 800053c:	4b16      	ldr	r3, [pc, #88]	@ (8000598 <SwitchInit+0xb8>)
 800053e:	68db      	ldr	r3, [r3, #12]
 8000540:	687a      	ldr	r2, [r7, #4]
 8000542:	0052      	lsls	r2, r2, #1
 8000544:	3201      	adds	r2, #1
 8000546:	2101      	movs	r1, #1
 8000548:	4091      	lsls	r1, r2
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	0052      	lsls	r2, r2, #1
 800054e:	2001      	movs	r0, #1
 8000550:	fa00 f202 	lsl.w	r2, r0, r2
 8000554:	430a      	orrs	r2, r1
 8000556:	43d2      	mvns	r2, r2
 8000558:	4611      	mov	r1, r2
 800055a:	4a0f      	ldr	r2, [pc, #60]	@ (8000598 <SwitchInit+0xb8>)
 800055c:	400b      	ands	r3, r1
 800055e:	60d3      	str	r3, [r2, #12]
	EXTI->FTSR |= BV(SWITCH);
 8000560:	4b0e      	ldr	r3, [pc, #56]	@ (800059c <SwitchInit+0xbc>)
 8000562:	68db      	ldr	r3, [r3, #12]
 8000564:	4a0d      	ldr	r2, [pc, #52]	@ (800059c <SwitchInit+0xbc>)
 8000566:	f043 0301 	orr.w	r3, r3, #1
 800056a:	60d3      	str	r3, [r2, #12]
	EXTI->IMR |= BV(SWITCH);
 800056c:	4b0b      	ldr	r3, [pc, #44]	@ (800059c <SwitchInit+0xbc>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a0a      	ldr	r2, [pc, #40]	@ (800059c <SwitchInit+0xbc>)
 8000572:	f043 0301 	orr.w	r3, r3, #1
 8000576:	6013      	str	r3, [r2, #0]
	SYSCFG->EXTICR[0] &= ~(BV(3) | BV(2) | BV(1) | BV(0));
 8000578:	4b09      	ldr	r3, [pc, #36]	@ (80005a0 <SwitchInit+0xc0>)
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	4a08      	ldr	r2, [pc, #32]	@ (80005a0 <SwitchInit+0xc0>)
 800057e:	f023 030f 	bic.w	r3, r3, #15
 8000582:	6093      	str	r3, [r2, #8]
	//NVIC->ISER[0] |= BV(EXTI0_IRQn);
	NVIC_EnableIRQ(EXTI0_IRQn);
 8000584:	2006      	movs	r0, #6
 8000586:	f7ff ff8f 	bl	80004a8 <__NVIC_EnableIRQ>
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40023800 	.word	0x40023800
 8000598:	40020000 	.word	0x40020000
 800059c:	40013c00 	.word	0x40013c00
 80005a0:	40013800 	.word	0x40013800

080005a4 <EXTI0_IRQHandler>:
}

volatile int exti0_flag = 0;

void EXTI0_IRQHandler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
	EXTI->PR |= BV(SWITCH);
 80005a8:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <EXTI0_IRQHandler+0x20>)
 80005aa:	695b      	ldr	r3, [r3, #20]
 80005ac:	4a05      	ldr	r2, [pc, #20]	@ (80005c4 <EXTI0_IRQHandler+0x20>)
 80005ae:	f043 0301 	orr.w	r3, r3, #1
 80005b2:	6153      	str	r3, [r2, #20]
	exti0_flag = 1;
 80005b4:	4b04      	ldr	r3, [pc, #16]	@ (80005c8 <EXTI0_IRQHandler+0x24>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	601a      	str	r2, [r3, #0]
}
 80005ba:	bf00      	nop
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	40013c00 	.word	0x40013c00
 80005c8:	20000020 	.word	0x20000020

080005cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  DWT_Init();
 80005d0:	f000 f802 	bl	80005d8 <DWT_Init>
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80005dc:	4b14      	ldr	r3, [pc, #80]	@ (8000630 <DWT_Init+0x58>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	4a13      	ldr	r2, [pc, #76]	@ (8000630 <DWT_Init+0x58>)
 80005e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80005e6:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80005e8:	4b11      	ldr	r3, [pc, #68]	@ (8000630 <DWT_Init+0x58>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	4a10      	ldr	r2, [pc, #64]	@ (8000630 <DWT_Init+0x58>)
 80005ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80005f2:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80005f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000634 <DWT_Init+0x5c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a0e      	ldr	r2, [pc, #56]	@ (8000634 <DWT_Init+0x5c>)
 80005fa:	f023 0301 	bic.w	r3, r3, #1
 80005fe:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000600:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <DWT_Init+0x5c>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a0b      	ldr	r2, [pc, #44]	@ (8000634 <DWT_Init+0x5c>)
 8000606:	f043 0301 	orr.w	r3, r3, #1
 800060a:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 800060c:	4b09      	ldr	r3, [pc, #36]	@ (8000634 <DWT_Init+0x5c>)
 800060e:	2200      	movs	r2, #0
 8000610:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000612:	bf00      	nop
    __ASM volatile ("NOP");
 8000614:	bf00      	nop
    __ASM volatile ("NOP");
 8000616:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000618:	4b06      	ldr	r3, [pc, #24]	@ (8000634 <DWT_Init+0x5c>)
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	2b00      	cmp	r3, #0
 800061e:	bf0c      	ite	eq
 8000620:	2301      	moveq	r3, #1
 8000622:	2300      	movne	r3, #0
 8000624:	b2db      	uxtb	r3, r3
}
 8000626:	4618      	mov	r0, r3
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	e000edf0 	.word	0xe000edf0
 8000634:	e0001000 	.word	0xe0001000

08000638 <UartInit>:

#define TX_PIN	2
#define RX_PIN	3
#define USART_ALT_FN	7

void UartInit(uint32_t baud) {
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	// UART GPIO Init -- PA.2 (Tx) and PA.3 (Rx)
	// enable clock
	RCC->AHB1ENR |= BV(RCC_AHB1ENR_GPIOAEN_Pos);
 8000640:	4b31      	ldr	r3, [pc, #196]	@ (8000708 <UartInit+0xd0>)
 8000642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000644:	4a30      	ldr	r2, [pc, #192]	@ (8000708 <UartInit+0xd0>)
 8000646:	f043 0301 	orr.w	r3, r3, #1
 800064a:	6313      	str	r3, [r2, #48]	@ 0x30
	//	alt fn = 0111 = 7 (Uart Tx and Rx)
	GPIOA->AFR[0] |= ((USART_ALT_FN << GPIO_AFRL_AFSEL3_Pos) | (USART_ALT_FN << GPIO_AFRL_AFSEL2_Pos));
 800064c:	4b2f      	ldr	r3, [pc, #188]	@ (800070c <UartInit+0xd4>)
 800064e:	6a1b      	ldr	r3, [r3, #32]
 8000650:	4a2e      	ldr	r2, [pc, #184]	@ (800070c <UartInit+0xd4>)
 8000652:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000656:	6213      	str	r3, [r2, #32]
	// 	mode=10 (alt fn), speed=00 (low), pupdr=00 (none), typer=0 (push-pull)
	GPIOA->MODER |= (BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2 + 1));
 8000658:	4b2c      	ldr	r3, [pc, #176]	@ (800070c <UartInit+0xd4>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a2b      	ldr	r2, [pc, #172]	@ (800070c <UartInit+0xd4>)
 800065e:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000662:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(BV(TX_PIN * 2) | BV(RX_PIN * 2));
 8000664:	4b29      	ldr	r3, [pc, #164]	@ (800070c <UartInit+0xd4>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a28      	ldr	r2, [pc, #160]	@ (800070c <UartInit+0xd4>)
 800066a:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 800066e:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 8000670:	4b26      	ldr	r3, [pc, #152]	@ (800070c <UartInit+0xd4>)
 8000672:	689b      	ldr	r3, [r3, #8]
 8000674:	4a25      	ldr	r2, [pc, #148]	@ (800070c <UartInit+0xd4>)
 8000676:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800067a:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 800067c:	4b23      	ldr	r3, [pc, #140]	@ (800070c <UartInit+0xd4>)
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	4a22      	ldr	r2, [pc, #136]	@ (800070c <UartInit+0xd4>)
 8000682:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000686:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER &= ~(BV(TX_PIN) | BV(RX_PIN));
 8000688:	4b20      	ldr	r3, [pc, #128]	@ (800070c <UartInit+0xd4>)
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	4a1f      	ldr	r2, [pc, #124]	@ (800070c <UartInit+0xd4>)
 800068e:	f023 030c 	bic.w	r3, r3, #12
 8000692:	6053      	str	r3, [r2, #4]

	// UART Config
	// enable uart clock
	RCC->APB1ENR |= BV(RCC_APB1ENR_USART2EN_Pos);
 8000694:	4b1c      	ldr	r3, [pc, #112]	@ (8000708 <UartInit+0xd0>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000698:	4a1b      	ldr	r2, [pc, #108]	@ (8000708 <UartInit+0xd0>)
 800069a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800069e:	6413      	str	r3, [r2, #64]	@ 0x40
	// tx en (TE=1), rx en (RE=1), wordlen=8 (M=0), OVER8=0, disable parity (PCE=0)
	USART2->CR1 = BV(USART_CR1_TE_Pos) | BV(USART_CR1_RE_Pos);
 80006a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000710 <UartInit+0xd8>)
 80006a2:	220c      	movs	r2, #12
 80006a4:	60da      	str	r2, [r3, #12]
	// 1 stop bit (STOP=00), disable clock (CLKEN=0)
	USART2->CR2 = 0x00000000;
 80006a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000710 <UartInit+0xd8>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
	// no hw control, no irda, no dma, no interupts
	USART2->CR3 = 0x00000000;
 80006ac:	4b18      	ldr	r3, [pc, #96]	@ (8000710 <UartInit+0xd8>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	615a      	str	r2, [r3, #20]
	// set BRR for given baud rate
	switch(baud) {
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 80006b8:	d016      	beq.n	80006e8 <UartInit+0xb0>
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 80006c0:	d816      	bhi.n	80006f0 <UartInit+0xb8>
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 80006c8:	d004      	beq.n	80006d4 <UartInit+0x9c>
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 80006d0:	d005      	beq.n	80006de <UartInit+0xa6>
 80006d2:	e00d      	b.n	80006f0 <UartInit+0xb8>
		case BAUD_9600:
			USART2->BRR = BAUD_BRR_9600;
 80006d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000710 <UartInit+0xd8>)
 80006d6:	f240 6283 	movw	r2, #1667	@ 0x683
 80006da:	609a      	str	r2, [r3, #8]
			break;
 80006dc:	e008      	b.n	80006f0 <UartInit+0xb8>
		case BAUD_38400:
			USART2->BRR = BAUD_BRR_38400;
 80006de:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <UartInit+0xd8>)
 80006e0:	f240 12a1 	movw	r2, #417	@ 0x1a1
 80006e4:	609a      	str	r2, [r3, #8]
			break;
 80006e6:	e003      	b.n	80006f0 <UartInit+0xb8>
		case BAUD_115200:
			USART2->BRR = BAUD_BRR_115200;
 80006e8:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <UartInit+0xd8>)
 80006ea:	228b      	movs	r2, #139	@ 0x8b
 80006ec:	609a      	str	r2, [r3, #8]
			break;
 80006ee:	bf00      	nop
	}
	// uart enable (UE=1)
	USART2->CR1 |= BV(USART_CR1_UE_Pos);
 80006f0:	4b07      	ldr	r3, [pc, #28]	@ (8000710 <UartInit+0xd8>)
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	4a06      	ldr	r2, [pc, #24]	@ (8000710 <UartInit+0xd8>)
 80006f6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006fa:	60d3      	str	r3, [r2, #12]
}
 80006fc:	bf00      	nop
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800
 800070c:	40020000 	.word	0x40020000
 8000710:	40004400 	.word	0x40004400

08000714 <UartPutch>:

void UartPutch(uint8_t ch) {
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
	// wait until TDR is empty (i.e. prev byte transmitted)
	while((USART2->SR & BV(USART_SR_TXE_Pos)) == 0)
 800071e:	bf00      	nop
 8000720:	4b06      	ldr	r3, [pc, #24]	@ (800073c <UartPutch+0x28>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000728:	2b00      	cmp	r3, #0
 800072a:	d0f9      	beq.n	8000720 <UartPutch+0xc>
		;
	// write new byte in TDR
	USART2->DR = ch;
 800072c:	4a03      	ldr	r2, [pc, #12]	@ (800073c <UartPutch+0x28>)
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	6053      	str	r3, [r2, #4]
}
 8000732:	bf00      	nop
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr
 800073c:	40004400 	.word	0x40004400

08000740 <UartGetch>:

uint8_t UartGetch(void) {
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
	// wait until RDR is not empty (i.e. new byte received)
	while((USART2->SR & BV(USART_SR_RXNE_Pos)) == 0)
 8000746:	bf00      	nop
 8000748:	4b07      	ldr	r3, [pc, #28]	@ (8000768 <UartGetch+0x28>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f003 0320 	and.w	r3, r3, #32
 8000750:	2b00      	cmp	r3, #0
 8000752:	d0f9      	beq.n	8000748 <UartGetch+0x8>
		;
	// read received byte from RDR
	char ch = USART2->DR;
 8000754:	4b04      	ldr	r3, [pc, #16]	@ (8000768 <UartGetch+0x28>)
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	71fb      	strb	r3, [r7, #7]
	return ch;
 800075a:	79fb      	ldrb	r3, [r7, #7]
}
 800075c:	4618      	mov	r0, r3
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	40004400 	.word	0x40004400

0800076c <UartPuts>:

void UartPuts(char str[]) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	int i;
	for(i=0; str[i]!='\0'; i++)
 8000774:	2300      	movs	r3, #0
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	e009      	b.n	800078e <UartPuts+0x22>
		UartPutch(str[i]);
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	4413      	add	r3, r2
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff ffc6 	bl	8000714 <UartPutch>
	for(i=0; str[i]!='\0'; i++)
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	3301      	adds	r3, #1
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	687a      	ldr	r2, [r7, #4]
 8000792:	4413      	add	r3, r2
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d1ef      	bne.n	800077a <UartPuts+0xe>
}
 800079a:	bf00      	nop
 800079c:	bf00      	nop
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <UartGets>:

void UartGets(char str[]) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	int i=0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
	char ch;
	do {
		ch = UartGetch();
 80007b0:	f7ff ffc6 	bl	8000740 <UartGetch>
 80007b4:	4603      	mov	r3, r0
 80007b6:	72fb      	strb	r3, [r7, #11]
		str[i] = ch;
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	4413      	add	r3, r2
 80007be:	7afa      	ldrb	r2, [r7, #11]
 80007c0:	701a      	strb	r2, [r3, #0]
		i++;
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	3301      	adds	r3, #1
 80007c6:	60fb      	str	r3, [r7, #12]
	} while(ch != '\r');
 80007c8:	7afb      	ldrb	r3, [r7, #11]
 80007ca:	2b0d      	cmp	r3, #13
 80007cc:	d1f0      	bne.n	80007b0 <UartGets+0xc>
	str[i] = '\n';
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	4413      	add	r3, r2
 80007d4:	220a      	movs	r2, #10
 80007d6:	701a      	strb	r2, [r3, #0]
	i++;
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	3301      	adds	r3, #1
 80007dc:	60fb      	str	r3, [r7, #12]
	str[i] = '\0';
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	4413      	add	r3, r2
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]
}
 80007e8:	bf00      	nop
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007f0:	480d      	ldr	r0, [pc, #52]	@ (8000828 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007f4:	f7ff feea 	bl	80005cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f8:	480c      	ldr	r0, [pc, #48]	@ (800082c <LoopForever+0x6>)
  ldr r1, =_edata
 80007fa:	490d      	ldr	r1, [pc, #52]	@ (8000830 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000834 <LoopForever+0xe>)
  movs r3, #0
 80007fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000800:	e002      	b.n	8000808 <LoopCopyDataInit>

08000802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000806:	3304      	adds	r3, #4

08000808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800080c:	d3f9      	bcc.n	8000802 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800080e:	4a0a      	ldr	r2, [pc, #40]	@ (8000838 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000810:	4c0a      	ldr	r4, [pc, #40]	@ (800083c <LoopForever+0x16>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000814:	e001      	b.n	800081a <LoopFillZerobss>

08000816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000818:	3204      	adds	r2, #4

0800081a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800081c:	d3fb      	bcc.n	8000816 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800081e:	f000 f811 	bl	8000844 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000822:	f7ff fd7f 	bl	8000324 <main>

08000826 <LoopForever>:

LoopForever:
  b LoopForever
 8000826:	e7fe      	b.n	8000826 <LoopForever>
  ldr   r0, =_estack
 8000828:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800082c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000830:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000834:	080009dc 	.word	0x080009dc
  ldr r2, =_sbss
 8000838:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800083c:	20000024 	.word	0x20000024

08000840 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000840:	e7fe      	b.n	8000840 <ADC_IRQHandler>
	...

08000844 <__libc_init_array>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	4d0d      	ldr	r5, [pc, #52]	@ (800087c <__libc_init_array+0x38>)
 8000848:	4c0d      	ldr	r4, [pc, #52]	@ (8000880 <__libc_init_array+0x3c>)
 800084a:	1b64      	subs	r4, r4, r5
 800084c:	10a4      	asrs	r4, r4, #2
 800084e:	2600      	movs	r6, #0
 8000850:	42a6      	cmp	r6, r4
 8000852:	d109      	bne.n	8000868 <__libc_init_array+0x24>
 8000854:	4d0b      	ldr	r5, [pc, #44]	@ (8000884 <__libc_init_array+0x40>)
 8000856:	4c0c      	ldr	r4, [pc, #48]	@ (8000888 <__libc_init_array+0x44>)
 8000858:	f000 f818 	bl	800088c <_init>
 800085c:	1b64      	subs	r4, r4, r5
 800085e:	10a4      	asrs	r4, r4, #2
 8000860:	2600      	movs	r6, #0
 8000862:	42a6      	cmp	r6, r4
 8000864:	d105      	bne.n	8000872 <__libc_init_array+0x2e>
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f855 3b04 	ldr.w	r3, [r5], #4
 800086c:	4798      	blx	r3
 800086e:	3601      	adds	r6, #1
 8000870:	e7ee      	b.n	8000850 <__libc_init_array+0xc>
 8000872:	f855 3b04 	ldr.w	r3, [r5], #4
 8000876:	4798      	blx	r3
 8000878:	3601      	adds	r6, #1
 800087a:	e7f2      	b.n	8000862 <__libc_init_array+0x1e>
 800087c:	080009d4 	.word	0x080009d4
 8000880:	080009d4 	.word	0x080009d4
 8000884:	080009d4 	.word	0x080009d4
 8000888:	080009d8 	.word	0x080009d8

0800088c <_init>:
 800088c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800088e:	bf00      	nop
 8000890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000892:	bc08      	pop	{r3}
 8000894:	469e      	mov	lr, r3
 8000896:	4770      	bx	lr

08000898 <_fini>:
 8000898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800089a:	bf00      	nop
 800089c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800089e:	bc08      	pop	{r3}
 80008a0:	469e      	mov	lr, r3
 80008a2:	4770      	bx	lr
